Syscall,Sentence,FirstLine,Synonym,SynonymSentence,Obj_type
shutdown(),shut down part of a full-duplex connection,"<shut down,part of a full-duplex connection>","<,>",,NET
recvmmsg(),receive multiple messages on a socket,"<receive,multiple messages>","<,>",,NET
sendmmsg(),send multiple messages on a socket,"<send,multiple messages>","<transmit,multiple messages>",transmit multiple messages on a socket using a single system call.,NET
pipe2(),create pipe,"<create,pipe>","<,>",,PROC
mq_unlink(),remove a message queue,"<remove,a message queue>","<,>",,NET
socketpair(),create a pair of connected sockets,"<create,a pair of connected sockets>","<,>",,NET
mq_timedsend(),send a message to a message queue,"<send,a message to a message queue>","<,>",,NET
mq_open(),open a message queue,"<open,a message queue>","<create,a new POSIX message>",creates a new POSIX message queue or opens an existing queue.,NET
accept4(),accept a connection on a socket,"<accept,a connection on a socket>","<creates,a new connected socket>","creates a new connected socket, and returns a new file descriptor referring to that socket.",NET
mq_timedreceive(),receive a message from a message queue,"<receive,a message from a message queue>","<,>",,NET
getpeername(),get name of connected peer socket,"<get,name of connected peer socket>","<,>",,NET
accept(),accept a connection on a socket,"<accept,a connection on a socket>","<creates,a new connected socket>","creates a new connected socket, and returns a new file descriptor referring to that socket.",NET
listen(),listen for connections on a socket,"<listen for,connections on a socket>","<,>",,NET
mq_getsetattr(),get/set message queue attributes,"<get,message queue attributes>","<retrieve, attributes of the message queue>",retrieve attributes of the message queue referred to by the message queue descriptor,NET
mq_getsetattr(),get/set message queue attributes,"<set,message queue attributes>","<modify, attributes of the message queue>",modify attributes of the message queue referred to by the message queue descriptor,NET
mq_notify(),register for notification when a message is available,"<register for,notification>","<unregister for,delivery of an asynchronous notification>",register or unregister for delivery of an asynchronous notification,NET
oldolduname(),get name and information about current kernel,"<get,name and information>","<,>",,PROC
olduname(),get name and information about current kernel,"<get,name and information>","<,>",,PROC
madvise(),give advice about use of memory,"<give,advice>","<,>",,MEM
request_key(),request a key from the kernel's key management facility,"<request,a key>","<find,a key> | <search for,a matching key>",find a key of the given type with a description (name) that matches the specified description. | recursively searches for a matching key in all of the keyrings attached to the calling process.,PROC
sched_get_priority_max(),get static priority range,"<get,static priority range>","<,>",,PROC
kexec_load(),load a new kernel for later execution,"<load,a new kernel>","<,>",,PROC
setuid(),set user identity,"<set,user identity>","<,>",,ID
geteuid32(),get user identity,"<get,user identity>","<,>",,ID
ustat(),get filesystem statistics,"<get,filesystem statistics>","<,>",,FILE
keyctl(),manipulate the kernel's key management facility,"<manipulate,the kernel's key management facility>","<,>",,PROC
setreuid32(),set real and/or effective user ID,"<set,real and/or effective user ID>","<,>",,ID
times(),get process times,"<get,process times>","<,>",,TIME
get_kernel_syms(),retrieve exported kernel and module symbols,"<retrieve,exported kernel and module symbols>","<,>",,PROC
_sysctl(),read system parameters,"<read,system parameters>","<,>",,PROC
_sysctl(),write system parameters,"<write,system parameters>","<,>",,PROC
getpgid(),get process group,"<get,process group>","<,>",,ID
getegid32(),get group identity,"<get,group identity>","<,>",,ID
getuid32(),get user identity,"<get,user identity>","<,>",,ID
getpgrp(),get process group,"<get,process group>","<retrieve,the calling process's PGID>",retrieving the calling process's PGID,ID
setpgid(),set process group,"<set,process group>","<,>",,ID
gettid(),get thread identification,"<get,thread identification>","<,>",,ID
stime(),set time,"<set,time>","<,>",,TIME
setregid(),set real and/or effective group ID,"<set,real and/or effective group ID>","<,>",,ID
perf_event_open(),set up performance monitoring,"<set up,performance monitoring>","<create,a file descriptor>",creates a file descriptor that allows measuring performance information,FILE
setgid32(),set group identity,"<set,group identity>","<,>",,ID
getsid(),get session ID,"<get,session ID>","<,>",,ID
shmctl(),System V shared memory control,"<share,memory control>","<,>",,ID
getrusage(),get resource usage,"<get,resource usage>","<,>",,RESOURCE_BYTE
semget(),get a System V semaphore set identifier,"<get,a System V semaphore set identifier>","<obtain,the identifier> | <create,a new set>","It may be used either to obtain the identifier of a previously created semaphore set, or to create a new set",ID
msgget(),get a System V message queue identifier,"<get,a System V message queue identifier>","<obtain,the identifier> | <create,a new set>","It may be used either to obtain the identifier of a previously created message queue, or to create a new set.",ID
setreuid(),set real and/or effective user ID,"<set,real and/or effective user ID>","<,>",,ID
sched_get_priority_min(),get static priority range,"<get,static priority range>","<,>",,PROC
kexec_file_load(),load a new kernel for later execution,"<load,a new kernel>","<read,the kernel>",It reads the kernel to be loaded from the file referred to by the file descriptor,PROC
setregid32(),set real and/or effective group ID,"<set,real and/or effective group ID>","<,>",,ID
setgid(),set group identity,"<set,group identity>","<,>",,ID
setuid32(),set user identity,"<set,user identity>","<,>",,ID
add_key(),add a key to the kernel's key management facility,"<add,a key>","<create,a key> | <update,a key> | <instantiate,a key> | <attach,a key>","creates or updates a key of the given type and description, instantiates it with the payload of length plen, attaches it to the nominated keyring",PROC
getgid32(),get group identity,"<get,group identity>","<,>",,ID
ipc(),System V IPC system calls,"<communicate with,process>","<,>",,NET
getgroups(),get list of supplementary group IDs,"<get,list of supplementary group IDs>","<,>",,ID
setfsuid32(),set user identity used for filesystem checks,"<set,user identity>","<,>",,ID
setdomainname(),set NIS domain name,"<set,NIS domain name>","<change,the NIS domain name>",change the NIS domain name of the host system.,NET
setresuid32(),"set real, effective, and saved user ID","<set,real effective and saved user ID>","<,>",,ID
getresgid32(),"get real, effective, and saved group IDs","<get,real effective and saved group IDs>","<,>",,ID
setgroups(),set list of supplementary group IDs,"<set,list of supplementary group IDs>","<,>",,ID
getcpu(),determine CPU and NUMA node on which the calling thread is running,"<determine,CPU and NUMA node>","<identify,the processor and node>",identifies the processor and node on which the calling thread or process is currently running and writes them into the integers pointed to by the cpu and node arguments.,PROC
setresuid(),"set real, effective, and saved user ID","<set,real effective and saved user ID>","<,>",,ID
setfsgid32(),set group identity used for filesystem checks,"<set,group identity>","<,>",,ID
getgroups32(),get list of supplementary group IDs,"<get,list of supplementary group IDs>","<,>",,ID
sethostname(),set hostname,"<set,hostname>","<change,the system hostname>",change the system hostname.,NET
setfsuid(),set user identity used for filesystem checks,"<set,user identity>","<,>",,ID
setresgid(),"set real, effective, and saved group ID","<set,real effective and saved group ID>","<,>",,ID
setrlimit(),set resource limits,"<set,resource limits>","<,>",,RESOURCE_BYTE
getresgid(),"get real, effective, and saved group IDs","<get,real effective and saved group IDs>","<,>",,ID
getpriority(),get program scheduling priority,"<get,program scheduling priority>","<,>",,PROC
setfsgid(),set group identity used for filesystem checks,"<set,group identity>","<,>",,ID
setpriority(),set program scheduling priority,"<set,program scheduling priority>","<,>",,PROC
setgroups32(),set list of supplementary group IDs,"<set,list of supplementary group IDs>","<,>",,ID
getresuid(),"get real, effective, and saved user IDs","<get,real effective and saved user IDs>","<,>",,ID
syslog(),read and/or clear kernel message ring buffer; set console_loglevel,"<read,kernel message ring buffer>","<,>",,PROC
syslog(),read and/or clear kernel message ring buffer; set console_loglevel,"<clear,kernel message ring buffer>","<,>",,PROC
syslog(),read and/or clear kernel message ring buffer; set console_loglevel,"<set,console_loglevel>","<,>",,PROC
setresgid32(),"set real, effective, and saved group ID","<set,real effective and saved group ID>","<,>",,ID
getresuid32(),"get real, effective, and saved user IDs","<get,real effective and saved user IDs>","<,>",,ID
io_cancel(),cancel an outstanding asynchronous I/O operation,"<cancel,an outstanding asynchronous I/O operation>","<,>",,FILE
iopl(),change I/O privilege level,"<change,I/O privilege level>","<,>",,FILE
pciconfig_read(),pci device information handling,"<handle,pci device information>","<read,to buf>",Reads to buf from device dev at offset off value.,FILE
pciconfig_write(),pci device information handling,"<handle,pci device information>","<write,from buf>",Writes from buf to device dev at offset off value.,FILE
pciconfig_iobase(),pci device information handling,"<handle,pci device information>","<,>",,FILE
io_destroy(),destroy an asynchronous I/O context,"<destroy,an asynchronous I/O context>","<,>",,FILE
ioperm(),set port input/output permissions,"<set,port input/output permissions>","<set,port access permission bits>",ioperm() sets the port access permission bits for the calling thread for num bits starting from port address from.,FILE
io_getevents(),read asynchronous I/O events from the completion queue,"<read,asynchronous I/O events from the completion queue>","<,>",,FILE
io_setup(),create an asynchronous I/O context,"<create,an asynchronous I/O context>","<,>",,FILE
swapoff(),start/stop swapping to file/device,"<stop,swapping to file/device>","<,>",,FILE
io_submit(),submit asynchronous I/O blocks for processing,"<submit,asynchronous I/O blocks for processing>","<,>",,FILE
swapon(),start/stop swapping to file/device,"<start,swapping to file/device>","<set,swap area to file or block device>", swapon() sets the swap area to the file or block device specified by path,FILE
idle(),make process 0 idle,"<make,process 0 idle>","<mark,process's pages as swappable>|<lower,priority>|<enter,main scheduling loop>","It marks the process's pages as swappable, lowers its priority, and enters the main scheduling loop.",PROC
move_pages(),move individual pages of a process to another node,"<move,individual pages of a process to another node>","<,>",,MEM
timer_gettime(),arm/disarm and fetch state of POSIX per-process timer,"<fetch,state of POSIX per>","<,>",,TIME
timer_delete(),delete a per-process timer,"<delete,a per-process timer>","<,>",,TIME
execveat(),execute program relative to a directory file descriptor,"<execute,program relative to a directory file descriptor>","<,>",,PROC
mlockall(),lock and unlock memory,"<lock,memory>","<lock,part or all of the calling process's virtual address space>","mlock(), mlock2(), and mlockall() lock part or all of the calling process's virtual address space into RAM",MEM
pkey_alloc(),allocate or free a protection key,"<allocate,a protection key>","<,>",,MEM
personality(),set the process execution domain,"<set,the process execution domain>","<,>",,MEM
unshare(),disassociate parts of the process execution context,"<disassociate,parts of the process execution context>","<,>",,FILE
process_vm_readv(),transfer data between process address spaces,"<transfer,data between process address spaces>","<,>",,PROC
mlock(),lock and unlock memory,"<lock,and unlock memory>","<,>",,MEM
restart_syscall(),restart a system call after interruption by a stop signal,"<restart,a system call after interruption by a stop signal>","<,>",,PROC
sched_yield(),yield the processor,"<yield,the processor>","<cause,calling thread to relinquish the CPU>",sched_yield() causes the calling thread to relinquish the CPU.,PROC
setns(),reassociate thread with a namespace,"<reassociate,thread with a namespace>","<,>",,FILE
init_module(),load a kernel module,"<load,a kernel module>","<load,ELF image into kernel space>",init_module() loads an ELF image into kernel space,PROC
mlock2(),lock and unlock memory,"<lock,memory>","<,>",,MEM
mbind(),set memory policy for a memory range,"<set,memory policy>","<,>",,MEM
munlockall(),lock and unlock memory,"<unlock,memory>","<,>",,MEM
rt_sigreturn(),return from signal handler and cleanup stack frame,"<return,from signal handler and cleanup stack frame>","<,>",,PROC
pkey_free(),allocate or free a protection key,"<free,a protection key>","<,>",,MEM
getrandom(),obtain a series of random bytes,"<obtain,a series of random bytes>","<fill,buffer with random bytes>",The getrandom() system call fills the buffer pointed to by buf with up to buflen random bytes.,RESOURCE_BYTE
pkey_mprotect(),set protection on a region of memory,"<set,protection on a region of memory>","<change,access protection for the calling process's memory pages>",mprotect() changes the access protections for the calling process's memory pages containing any part of the address range in the interval,MEM
set_mempolicy(),set default NUMA memory policy for a thread and its children,"<set,default NUMA memory policy for a thread and its children>","<,>",,MEM
migrate_pages(),move all pages in a process to another set of nodes,"<move,all pages in a process to another set of nodes>","<,>",,MEM
sigreturn(),return from signal handler and cleanup stack frame,"<return,from signal handler and cleanup stack frame>","<,>",,PROC
munlock(),lock and unlock memory,"<unlock,memory>","<,>",,MEM
tkill(),send a signal to a thread,"<send,a signal to a thread>","<,>",,PROC
process_vm_writev(),transfer data between process address spaces,"<transfer,data between process address spaces>","<,>",,PROC
timer_getoverrun(),get overrun count for a POSIX per-process timer,"<get,overrun count for a POSIX per-process timer>","<,>",,ID
rt_sigsuspend(),wait for a signal,"<wait for,a signal>","<,>",,PROC
bdflush(),"start, flush, or tune buffer","<start,buffer>","<,>",,MEM
bdflush(),"start, flush, or tune buffer","<flush,buffer>","<,>",,MEM
bdflush(),"start, flush, or tune buffer","<tune,buffer>","<,>",,MEM
bpf(),perform a command on an extended BPF map or program,"<perform,a command on an extended BPF map or program>","<,>",,MEM
exit(),terminate the calling process,"<terminate,the calling process>","<,>",,EXIT_STATUS
timer_settime(),arm/disarm and fetch state of POSIX per-process timer,"<arm,state of POSIX per-process timer>","<,>",,ID
timer_settime(),arm/disarm and fetch state of POSIX per-process timer,"<disarm,state of POSIX per-process timer>","<,>",,ID
sigsuspend(),wait for a signal,"<wait for,a signal>","<replace,signal mask of the calling thread>|<suspend,thread>",sigsuspend() temporarily replaces the signal mask of the calling thread with the mask given by mask and then suspends the thread,PROC
finit_module(),load a kernel module,"<load,a kernel module>","<load,an ELF image into kernel space>",init_module() loads an ELF image into kernel space,PROC
create_module(),create a loadable module entry,"<create,a loadable module entry>","<,>",,PROC
timer_create(),create a POSIX per-process timer,"<create,a POSIX per-process timer>","<,>",,ID
vm86(),enter virtual 8086 mode,"<enter,virtual 8086 mode>","<,>",,PROC
tgkill(),send a signal to a thread,"<send,a signal to a thread>","<,>",,PROC
delete_module(),unload a kernel module,"<unload,a kernel module>","<remove,unused loadable module entry>",The delete_module() system call attempts to remove the unused loadable module entry identified by name.,PROC
pause(),wait for signal,"<wait for,signal>","<,>",,PROC
seccomp(),operate on Secure Computing state of the process,"<operate on,Secure Computing state of the process>","<,>",,PROC
uselib(),load shared library,"<load,shared library>","<,>",,FILE
alarm(),set an alarm clock for delivery of a signal,"<set,an alarm clock for delivery of a signal>","<arrange for,a SIGALRM signal>",alarm() arranges for a SIGALRM signal to be delivered to the calling process in seconds seconds.,TIME
get_mempolicy(),retrieve NUMA memory policy for a thread,"<retrieve,NUMA memory policy for a thread>","<,>",,MEM
sched_setparam(),set and get scheduling parameters,"<set,scheduling parameters>","<,>",,PROC
sched_getparam(),set and get scheduling parameters,"<get,scheduling parameters>","<retrieve,scheduling parameters>",sched_getparam() retrieves the scheduling parameters for the thread identified by pid.,PROC
sigaltstack(),set and/or get signal stack context,"<set,signal stack context>","<define,a signal stack>",sigaltstack() allows a thread to define a new alternate signal stack and/or retrieve the state of an existing alternate signal stack.,PROC
sigaltstack(),set and/or get signal stack context,"<get,signal stack context>","<retrieve,state of signal stack>",sigaltstack() allows a thread to define a new alternate signal stack and/or retrieve the state of an existing alternate signal stack.,PROC
capset(),set/get capabilities of thread(s),"<set,capabilities of thread(s)>","<,>",,PROC
rt_sigtimedwait(),synchronously wait for queued signals,"<wait for,queued signals>","<,>",,PROC
rt_sigaction(),examine and change a signal action,"<examine,a signal action>","<,>",,PROC
rt_sigaction(),examine and change a signal action,"<change,a signal action>","<,>",,PROC
capget(),set/get capabilities of thread(s),"<get,capabilities of thread(s)>","<,>",,PROC
sched_setaffinity(),set and get a thread's CPU affinity mask,"<set,thread's CPU affinity mask>","<,>",,PROC
rt_sigprocmask(),examine and change blocked signals,"<examine,blocked signals>","<,>",,PROC
rt_sigprocmask(),examine and change blocked signals,"<change,blocked signals>","<fetch,signal mask of the calling thread>",sigprocmask() is used to fetch and/or change the signal mask of the calling thread.,PROC
sigpending(),examine pending signals,"<examine,pending signals>","<,>",,PROC
sched_rr_get_interval(),get the SCHED_RR interval for the named process,"<get,SCHED_RR interval for the named process>","<write into,the timespec structure>",sched_rr_get_interval() writes into the timespec structure pointed to by tp the round-robin time quantum for the process identified by pid.,PROC
sigprocmask(),examine and change blocked signals,"<examine,blocked signals>","<,>",,PROC
sigprocmask(),examine and change blocked signals,"<change,blocked signals>","<fetch,signal mask of the calling thread>",sigprocmask() is used to fetch and/or change the signal mask of the calling thread.,PROC
waitid(),wait for process to change state,"<wait for,process to change state>","<,>",,PROC
query_module(),query the kernel for various bits pertaining to modules,"<query,the kernel for various bits pertaining to modules>","<request,information about loadable module>",query_module() requests information from the kernel about loadable modules.,FILE
mincore(),determine whether pages are resident in memory,"<determine,whether pages are resident in memory>","<,>",,MEM
kcmp(),compare two processes to determine if they share a kernel resource,"<compare,two processes to determine if they share a kernel resource>","<check,whether two processes share a kernel resource>","The kcmp() system call can be used to check whether the two processes identified by pid1 and pid2 share a kernel resource such as virtual memory, file descriptors, and so on.",PROC
sched_getaffinity(),set and get a thread's CPU affinity mask,"<get,a thread's CPU affinity mask>","<write,affinity mask of the thread into cpu_set_t structure>",sched_getaffinity() writes the affinity mask of the thread whose ID is pid into the cpu_set_t structure pointed to by mask.,PROC
rt_sigpending(),examine pending signals,"<examine,pending signals>","<,>",,PROC
sched_setattr(),set and get scheduling policy and attributes,"<set,scheduling policy and attributes>","<,>",,PROC
ioprio_get(),get/set I/O scheduling class and priority,"<get,I/O scheduling class and priority>","<,>",,FILE
sigaction(),examine and change a signal action,"<examine,a signal action>","<,>",,PROC
sigaction(),examine and change a signal action,"<change,a signal action>","<,>",,PROC
setitimer(),get or set value of an interval timer,"<set,value of an interval timer>","<,>",,TIME
sched_getscheduler(),set and get scheduling policy/parameters,"<get,scheduling policy/parameters>","<,>",,PROC
ioprio_set(),get/set I/O scheduling class and priority,"<set,I/O scheduling class and priority>","<,>",,FILE
sched_getattr(),set and get scheduling policy and attributes,"<get,scheduling policy and attributes>","<fetch,scheduling policy and the associated attributes for the thread>",fetches the scheduling policy and the associated attributes for the thread whose ID is specified in pid.,PROC
get_robust_list(),get/set list of robust futexes,"<get,list of robust futexes>","<,>",,MEM
getitimer(),get or set value of an interval timer,"<get,value of an interval timer>","<place,current value of timer in buffer>",places the current value of the timer specified by which in the buffer pointed to by curr_value.,TIME
sched_setscheduler(),set and get scheduling policy/parameters,"<set,scheduling policy/parameters>","<,>",,PROC
_llseek(),reposition read/write file offset,"<reposition,file offset>","<,>",,FILE
fgetxattr(),retrieve an extended attribute value,"<retrieve,an extended attribute value>","<,>",,FILE
tee(),read from standard input and write to standard output and files,"<read,standard input>","<copy,standard input>","Copy standard input to each FILE, and also to standard output.",FILE
tee(),read from standard input and write to standard output and files,"<write,standard output and file>","<copy,standard input to each FILE and to standard output>","Copy standard input to each FILE, and also to standard output.",FILE
readdir(),read directory entry,"<read,directory entry>","<,>",,FILE
timerfd_gettime(),arm/disarm and fetch state of POSIX per-process timer,"<fetch,state of POSIX per-process timer>","<,>",,FILE
mknod(),create a special or ordinary file,"<create,a special or ordinary file>","<create,a filesystem node>","The system call mknod() creates a filesystem node (file, device, special file, or named pipe) named pathname",FILE
copy_file_range(),Copy a range of data from one file to another,"<copy,a range of data from one file>","<,>",,FILE
acct(),switch process accounting on or off,"<switch on,process accounting>","<enable,process accounting>",The acct() system call enables or disables process accounting,FILE
acct(),switch process accounting on or off,"<switch off,process accounting>","<disable,process accounting>",The acct() system call enables or disables process accounting,FILE
chown32(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
setxattr(),set an extended attribute value,"<set,an extended attribute value>","<,>",,FILE
sysfs(),get filesystem type information,"<get,filesystem type information>","<,>",,FILE
sendfile64(),transfer data between file descriptors,"<transfer,data between file descriptors>","<copy,data between one file descriptor and another>",sendfile() copies data between one file descriptor and another.,FILE
truncate(),truncate a file to a specified length,"<truncate,a file to a specified length>","<,>",,FILE
fremovexattr(),remove an extended attribute,"<remove,an extended attribute>","<,>",,FILE
epoll_create(),open an epoll file descriptor,"<open,an epoll file descriptor>","<create,epoll instance>",epoll_create() creates a new epoll(7) instance,FILE
utimensat(),change file timestamps with nanosecond precision,"<change,file timestamps with nanosecond precision>","<,>",,FILE
timerfd_settime(),arm/disarm and fetch state of POSIX per-process timer,"<arm,state of POSIX per-process timer>","<arm,timer identified by timerid>",timer_settime() arms or disarms the timer identified by timerid,FILE
timerfd_settime(),arm/disarm and fetch state of POSIX per-process timer,"<disarm,state of POSIX per-process timer>","<disarm,timer identified by timerid>",timer_settime() arms or disarms the timer identified by timerid,FILE
chroot(),change root directory,"<change,root directory>","<,>",,FILE
readlinkat(),read value of a symbolic link,"<read,value of a symbolic link>","<place,the contents of the symbolic link pathname in the buffer>",places the contents of the symbolic link pathname in the buffer buf,FILE
fstatfs(),get filesystem statistics,"<get,filesystem statistics>","<,>",,FILE
lchown32(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
utime(),change file last access and modification times,"<change,file last access and modification times>","<,>",,TIME
inotify_init1(),initialize an inotify instance,"<initialize,an inotify instance>","<,>",,FILE
creat(),open and possibly create a file,"<create,a file>","<,>",,FILE
fchmodat(),change permissions of a file,"<change,permissions of a file>","<change,file's mode bits>",change a file's mode bits,FILE
memfd_create(),create an anonymous file,"<create,an anonymous file>","<,>",,FILE
lstat64(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
lchown(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
lremovexattr(),remove an extended attribute,"<remove,an extended attribute>","<,>",,FILE
truncate64(),truncate a file to a specified length,"<truncate,a file to a specified length>","<,>",,FILE
pivot_root(),change the root mount,"<change,the root mount>","<,>",,FILE
epoll_create1(),open an epoll file descriptor,"<open,an epoll file descriptor>","<create,epoll instance>",epoll_create() creates a new epoll(7) instance,FILE
futimesat(),change timestamps of a file relative to a directory file descriptor,"<change,timestamps of a file relative to a directory file descriptor>","<,>",,FILE
timerfd_create(),timers that notify via file descriptors,"<create,timer>","<create,a new timer object>",timerfd_create() creates a new timer object,FILE
epoll_wait(),wait for an I/O event on an epoll file descriptor,"<wait,for an I/O event on an epoll file descriptor>","<,>",,FILE
epoll_pwait(),wait for an I/O event on an epoll file descriptor,"<wait,for an I/O event on an epoll file descriptor>","<,>",,FILE
statfs64(),get filesystem statistics,"<get,filesystem statistics>","<,>",,FILE
renameat2(),change the name or location of a file,"<change,the name or location of a file>","<rename,file>|<moving,file between directories>","rename() renames a file, moving it between directories if required",FILE
sendfile(),transfer data between file descriptors,"<transfer,data between file descriptors>","<copy,data between one file descriptor and another>",sendfile() copies data between one file descriptor and another.,FILE
mknodat(),create a special or ordinary file,"<create,a special or ordinary file>","<creates,a filesystem node>",The system call mknod() creates a filesystem node,FILE
lookup_dcookie(),return a directory entry's path,"<return,a directory entry's path>","<,>",,FILE
faccessat(),check user's permissions for a file,"<check,user's permissions for a file>","<,>",,FILE
lgetxattr(),retrieve an extended attribute value,"<retrieve,an extended attribute value>","<,>",,FILE
listxattr(),list extended attribute names,"<extended,attribute names>","<retrieve,extended attribute names associated with the given path in the filesystem>",retrieves the list of extended attribute names associated with the given path in the filesystem.,FILE
eventfd(),create a file descriptor for event notification,"<create,a file descriptor for event notification>","<,>",,FILE
oldstat(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
inotify_init(),initialize an inotify instance,"<initialize,an inotify instance>","<,>",,FILE
sync_file_range(),sync a file segment with disk,"<sync,a file segment with disk>","<,>",,FILE
oldfstat(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
chown(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
mkdirat(),create a directory,"<create,a directory>","<,>",,FILE
fstatfs64(),get filesystem statistics,"<get,filesystem statistics>","<,>",,FILE
llistxattr(),list extended attribute names,"<list,extended attribute names>","<retrieve,extended attribute names associated with the given path in the filesystem>",retrieves the list of extended attribute names associated with the given path in the filesystem.,FILE
ftruncate64(),truncate a file to a specified length,"<truncate,a file to a specified length>","<,>",,FILE
readahead(),initiate file readahead into page cache,"<initiate,file readahead into page cache>","<,>",,FILE
remap_file_pages(),create a nonlinear file mapping,"<create,a nonlinear file mapping>","<,>",,MEM
flistxattr(),list extended attribute names,"<list,extended attribute names>","<retrieve,extended attribute names associated with the given path in the filesystem>",retrieves the list of extended attribute names associated with the given path in the filesystem.,FILE
lsetxattr(),set an extended attribute value,"<set,an extended attribute value>","<,>",,FILE
ftruncate(),truncate a file to a specified length,"<truncate,a file to a specified length>","<,>",,FILE
getdents64(),get directory entries,"<get,directory entries>","<read,several linux_dirent structures from the directory referred to by the open file descriptor into the buffer>",The system call getdents() reads several linux_dirent structures from the directory referred to by the open file descriptor fd into the buffer pointed to by dirp,FILE
dup3(),duplicate a file descriptor,"<duplicate,a file descriptor>","<allocate,a new file descriptor that refers to the same open file description as the descriptor oldfd>",allocates a new file descriptor that refers to the same open file description as the descriptor oldfd,FILE
removexattr(),remove an extended attribute,"<remove,an extended attribute>","<,>",,FILE
fchown32(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
oldlstat(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
getxattr(),retrieve an extended attribute value,"<retrieve,an extended attribute value>","<,>",,FILE
sync_file_range2(),sync a file segment with disk,"<sync,a file segment with disk>","<,>",,FILE
renameat(),change the name or location of a file,"<change,the name or location of a file>","<rename,file>|<moving,file between directories>","rename() renames a file, moving it between directories if required",FILE
fchown(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
eventfd2(),create a file descriptor for event notification,"<create,a file descriptor for event notification>","<,>",,FILE
fstatat64(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
fstat64(),get file status,"<get,file status>","<retrieve,information about the file pointed to by pathname>",retrieve information about the file pointed to by pathname,FILE
fsetxattr(),set an extended attribute value,"<set,an extended attribute value>","<,>",,FILE
utimes(),change file last access and modification times,"<change,file last access and modification times>","<,>",,FILE
msync(),synchronize a file with a memory map,"<synchronize,a file with a memory map>","<,>",,FILE
fchownat(),change ownership of a file,"<change,ownership of a file>","<,>",,FILE
pwritev(),read or write data into multiple buffers,"<write,data into multiple buffers>","<,>",,FILE
inotify_rm_watch(),remove an existing watch from an inotify instance,"<remove,an existing watch from an inotify instance>","<,>",,FILE
statx(),get file status (extended),"<get,file status>","<,>",,FILE
readv(),read or write data into multiple buffers,"<read,data into multiple buffers>","<,>",,FILE
name_to_handle_at(),obtain handle for a pathname and open file via a handle,"<obtain,handle for a pathname>","<,>",,FILE
name_to_handle_at(),obtain handle for a pathname and open file via a handle,"<open,file via a handle>","<,>",,FILE
pwritev2(),read or write data into multiple buffers,"<write,data into multiple buffers>","<,>",,FILE
flock(),apply or remove an advisory lock on an open file,"<apply,an advisory lock on an open file>","<,>",,FILE
flock(),apply or remove an advisory lock on an open file,"<remove,an advisory lock on an open file>","<,>",,FILE
modify_ldt(),get or set a per-process LDT entry,"<get,per-process LDT entry>","<read,the local descriptor table (LDT) for a process.>",reads or writes the local descriptor table (LDT) for a process.,PROC
modify_ldt(),get or set a per-process LDT entry,"<set,per-process LDT entry>","<write,the local descriptor table (LDT) for a process.>",reads or writes the local descriptor table (LDT) for a process.,PROC
preadv2(),read or write data into multiple buffers,"<read,data into multiple buffers>","<,>",,FILE
pread64(),read from or write to a file descriptor at a given offset,"<read,from file descriptor at a given offset>","<,>",,FILE
preadv(),read or write data into multiple buffers,"<read,data into multiple buffers>","<,>",,FILE
signalfd(),create a file descriptor for accepting signals,"<create,a file descriptor for accepting signals>","<,>",,FILE
open_by_handle_at(),obtain handle for a pathname and open file via a handle,"<obtain,handle for a pathname and open file via a handle>","<,>",,FILE
open_by_handle_at(),obtain handle for a pathname and open file via a handle,"<open,file via a handle>","<open,file referred to by handle>",opens the file referred to by handle,FILE
writev(),read or write data into multiple buffers,"<write,data into multiple buffers>","<,>",,FILE
sync(),commit filesystem caches to disk,"<commit,filesystem caches to disk>","<,>",,FILE
fanotify_mark(),"add, remove, or modify an fanotify mark on a filesystem object","<add,an fanotify mark on a filesystem object>","<,>",,FILE
fanotify_mark(),"add, remove, or modify an fanotify mark on a filesystem object","<remove,an fanotify mark on a filesystem object>","<,>",,FILE
fanotify_mark(),"add, remove, or modify an fanotify mark on a filesystem object","<modify,an fanotify mark on a filesystem object>","<,>",,FILE
fdatasync(),synchronize a file's in-core state with storage device,"<synchronize,a file's in-core state with storage device>","<,>",,FILE
inotify_add_watch(),add a watch to an initialized inotify instance,"<add,watch>","<modifies,an existing watch>","inotify_add_watch() adds a new watch, or modifies an existing watch",FILE
signalfd4(),create a file descriptor for accepting signals,"<create,a file descriptor for accepting signals>","<,>",,FILE
pwrite64(),read from or write to a file descriptor at a given offset,"<write,a file descriptor at a given offset>","<,>",,FILE
fsync(),synchronize a file's in-core state with storage device,"<synchronize,a file's in-core state with storage device>","<,>",,FILE
userfaultfd(),create a file descriptor for handling page faults in user space,"<create,a file descriptor for handling page faults in user space>","<create,a new userfaultfd object>",userfaultfd() creates a new userfaultfd object,FILE
fanotify_init(),create and initialize fanotify group,"<create,fanotify group>","<,>",,FILE
fanotify_init(),create and initialize fanotify group,"<initialize,fanotify group>","<,>",,FILE
syncfs(),commit filesystem caches to disk,"<commit,filesystem caches to disk>","<,>",,FILE
sgetmask(),manipulation of signal mask (obsolete),"<manipulate,mask>","<,>",,PROC
ssetmask(),manipulation of signal mask (obsolete),"<manipulate,mask>","<set,mask>",sets the signal mask of the calling process,PROC
get_thread_area(),manipulate thread-local storage information,"<manipulate,storage information>","<store,pointer>",allows storing an arbitrary pointe,MEM
mount(),mount filesystem,"<mount,filesystem>","<attach,filesystem>",attaches the filesystem specified by source,FILE
fadvise64(),predeclare an access pattern for file data,"<predeclare,access pattern for file>","<access,file>",access file data in a specific pattern,FILE
fadvise64_64(),predeclare an access pattern for file data,"<predeclare,access pattern for file>","<access,file>",access file data in a specific pattern,FILE
umount(),unmount filesystem,"<unmount,filesystem>","<remove,attachment>",remove the attachment of the filesystem,FILE
umount2(),unmount filesystem,"<unmount,filesystem>","<remove,attachment>",remove the attachment of the filesystem,FILE
pselect6(),synchronous I/O multiplexing,"<multiplex,I/O>","<monitor,file descriptor>",monitor only file descriptors,FILE
select(),synchronous I/O multiplexing,"<multiplex,I/O>","<monitor,file descriptor>",monitor only file descriptors,FILE
_newselect(),synchronous I/O multiplexing,"<multiplex,I/O>","<monitor,file descriptor>",monitor only file descriptors,FILE
epoll_ctl(),control interface for an epoll file descriptor,"<control,interface>","<add,entries>|<change,settings>|<remove,file descriptor>",Add an entry to the interest list|Change the settings|Remove the target file descriptor,FILE
clock_settime(),clock and time functions,"<set,time>","<retrieve,time>",retrieve and set the time of the specified clock clockid.,TIME
clock_gettime(),clock and time functions,"<get,time>","<set,time>",retrieve and set the time of the specified clock clockid.,TIME
clock_nanosleep(),high-resolution sleep with specifiable clock,"<sleep,>","<suspend,execution>",suspends the execution of the calling thread,TIME
msgrcv(),System V message queue operations,"<operate,message queue>","<send,messages>",send messages to a System V message queue.,NET
msgsnd(),System V message queue operations,"<operate,message queue>","<receive,messages>",receive messages from a System V message queue.,NET
rt_sigqueueinfo(),queue a signal and data,"<queue,signal>","<send,signal>",send a signal plus data to a process or thread.,PROC
rt_tgsigqueueinfo(),queue a signal and data,"<queue,signal>","<send,signal>",send a signal plus data to a process or thread.,PROC
nice(),change process priority,"<change,process priority>","<,>",,PROC
fallocate(),manipulate file space,"<manipulate,file>","<,>",,FILE
splice(),splice data to/from a pipe,"<splice,data>","<move,data>",moves data between two file descriptors without copying between kernel address space and user address space.,FILE
lchmod(),change mode of file,"<change,mode of file>","<,>",,FILE
remove(),remove a file or directory,"<remove,file or directory>","<delete,name>",deletes a name from the filesystem.,FILE
ftime(),return date and time,"<return,date and time>","<,>",,TIME
ulimit(),get and set user limits,"<get,user limits>","<,>",,RESOURCE_BYTE
ulimit(),get and set user limits,"<set,user limits>","<,>",,RESOURCE_BYTE
profil(),execution time profile,"<execute,time profile>","<find out,areas>",find out in what areas your program spends most of its time.,MEM
reboot(),reboot or enable/disable Ctrl-Alt-Del,"<reboot,>","<,>",,PROC
reboot(),reboot or enable/disable Ctrl-Alt-Del,"<enable,>","<,>",,PROC
reboot(),reboot or enable/disable Ctrl-Alt-Del,"<disable,>","<,>",,PROC
adjtimex(),tune kernel clock,"<tune,clock>","<,>",,TIME
clock_adjtime(),tune kernel clock,"<tune,clock>","<,>",,TIME
clock_getres(),clock and time functions,"<get,resolution>","<,>",,TIME
membarrier(),issue memory barriers on a set of threads,"<issue,memory barriers>","<,>",,MEM
prctl(),operations on a process or thread,"<operate,process or thread>","<,>",,PROC
syscall(),indirect system call,"<invoke,system call>","<,>",,PROC
socketcall(),socket system calls,"<provide,socket>","<,>",,NET
semtimedop(),System V semaphore operations,"<operate,>","<perform,semaphores>",performs operations on selected semaphores in the set indicated by semid.,TIME
semop(),System V semaphore operations,"<operate,>","<perform,semaphores>",performs operations on selected semaphores in the set indicated by semid.,ID
signal(),ANSI C signal handling,"<handle,signal>","<,>",,PROC
cacheflush(),flush contents of instruction and/or data cache,"<flush,contents of instruction>","<,>",,MEM
vmsplice(),splice user pages to/from a pipe,"<splice,user pages>","<,>",,FILE
nfsservctl(),syscall interface to kernel nfs daemon,"<provide,interface>","<,>",,PROC
msgctl(),System V message control operations,"<control,operation>","<,>",,NET
semctl(),System V semaphore control operations,"<control,operation>","<,>",,ID
vhangup(),virtually hangup the current terminal,"<hangup,current terminal>","<arrange,user>",arranges for other users to have a ?�clean??terminal at login time.,PROC
read(),read from a file descriptor,"<read,file descriptor>","<seek,file>",On files that support seeking,FILE
readlink(),read value of a symbolic link,"<read,symbolic link>","<place,contents>|<truncate,contents>",readlink() places the contents of the symbolic link path in the buffer buf|It will (silently) truncate the contents,FILE
access(),check user's permissions for a file,"<check,user permissions>","<access,file>",access() checks whether the calling process can access the file pathname.,FILE
statfs(),get file system statistics,"<get,file system statistics>","<,>",,FILE
stat(),get file status,"<get,file status>","<retrieve, information>",retrieve information about the file pointed to by pathname,FILE
stat64(),get file status,"<get,file status>","<retrieve, information>",retrieve information about the file pointed to by pathname,FILE
fstat(),get file status,"<get,file status>","<retrieve, information>",retrieve information about the file pointed to by pathname,FILE
newfstatat(),get file status,"<get,file status>","<retrieve, information>",retrieve information about the file pointed to by pathname,FILE
lstat(),get file status,"<get,file status>","<retrieve, information>",retrieve information about the file pointed to by pathname,FILE
getcwd(),get current working directory,"<get,current working directory>","<,>",,FILE
getdents(),get directory entries,"<get,directory entries>","<,>",,FILE
poll(),wait for some event on a file descriptor,"<wait for,event>","<monitor,file descriptor>|<block,file descriptor>",The set of file descriptors to be monitored is specified in the fds argument|should block waiting for a file descriptor to become ready,FILE
ppoll(),wait for some event on a file descriptor,"<wait for,event>","<monitor,file descriptor>|<block,file descriptor>",The set of file descriptors to be monitored is specified in the fds argument|should block waiting for a file descriptor to become ready,FILE
dup(),duplicate a file descriptor,"<duplicate, file descriptor>","<allocate, file descriptor>|<create,a copy>|<share,file offset and file status flags>",allocates a new file descriptor|These system calls create a copy of the file descriptor oldfd|share file offset and file status flags,FILE
dup2(),duplicate a file descriptor,"<duplicate, file descriptor>","<allocate, file descriptor>|<create,a copy>|<share,file offset and file status flags>",allocates a new file descriptor|These system calls create a copy of the file descriptor oldfd|share file offset and file status flags,FILE
fcntl(),manipulate file descriptor,"<manipulate,file descriptor>","<find,file descriptor>|<get,file descriptor>|<set,lock>",find the lowest numbered available file descriptor|get a new file descriptor or the file status flags|set or clear a file segment lock,FILE
fcntl64(),manipulate file descriptor,"<manipulate,file descriptor>","<find,file descriptor>|<get,file descriptor>|<set,lock>",find the lowest numbered available file descriptor|get a new file descriptor or the file status flags|set or clear a file segment lock,FILE
mkdir(),create a directory,"<create,directory>","<,>",,FILE
open(),open and possibly create a file or device,"<open,file or device>","<,>",,FILE
open(),open and possibly create a file or device,"<create,file or device>","<,>",,FILE
openat(),open a file relative to a directory file descriptor,"<open,file>","<,>",,FILE
mmap(),map or unmap files or devices into memory,"<map,files or devices into memory>","<create,new mapping>",creates a new mapping in the virtual address space of the calling process.,FILE
mmap(),map or unmap files or devices into memory,"<unmap,files or devices into memory>","<create,new mapping>",creates a new mapping in the virtual address space of the calling process.,FILE
mmap2(),map files or devices into memory,"<map,files or devices>","<,>",,FILE
umask(),set file mode creation mask,"<set,mask>","<,>",,PERMISSION
link(),make a new name for a file,"<make,new name>","<create,new link>",creates a new link (also known as a hard link) to an existing file.,FILE
linkat(),create a file link relative to directory file descriptors,"<create,file link>","<,>",,FILE
symlinkat(),create a symbolic link relative to a directory file descriptor,"<create,symbolic link>","<,>",,FILE
symlink(),make a new name for a file,"<make,new name>","<create,symbolic link>",creates a symbolic link named newpath which contains the string oldpath.,FILE
fchdir(),change working directory,"<change,working directory>","<,>",,FILE
chdir(),changes the current working directory,"<change,current working directory>","<,>",,FILE
write(),write to a file descriptor,"<write,file descriptor>","<,>",,FILE
rename(),change the name or location of a file,"<change,name or location>","<rename,file>","renames a file, moving it between directories if required.",FILE
fchmod(),change permissions of a file,"<change,permissions of file>","<,>",,FILE
chmod(),change permissions of a file,"<change,permissions of file>","<,>",,FILE
lchmod(),change permissions of a file,"<change,permissions of file>","<,>",,FILE
rm(),removes each specified file,"<remove,file>","<,>",,FILE
rmdir(),delete a directory,"<delete,directory>","<,>",,FILE
munmap(),unmap files or devices into memory,"<unmap,files or devices>","<,>",,MEM
unlink(),delete a name and possibly the file it refers to,"<delete,file>","<,>",,FILE
unlinkat(),remove a directory entry relative to a directory file descriptor,"<remove,directory\>","<,>",,FILE
remove(),remove a file or directory,"<remove,file or directory>","<,>",,FILE
close(),close a file descriptor,"<close,file descriptor>","<free,resources>",the resources associated with the open file description are freed,FILE
lseek(),reposition read/write file offset,"<reposition,file offset>","<,>",,FILE
execve(),execute program,"<execute,program>","<,>",,PROC
exec(),executes the program referred to by pathname,"<execute,program>","<replace,process image>",replaces the current process image with a new process image.,PROC
clone(),create a child process,"<create,child process>","<,>",,PROC
fork(),create a child process,"<create,child process>","<,>",,PROC
vfork(),create a child process and block parent,"<create,child process>","<,>",,PROC
vfork(),create a child process and block parent,"<block,parent>","<,>",,PROC
kill(),send signal to a process,"<send signal,process>","<,>",,PROC
exit_group(),exit all threads in a process,"<exit,all threads in a process>","<,>",,EXIT_STATUS
ptrace(),process trace,"<trace,process>","<observe,execution of another process>|<control,execution of another process>|<examine,memory and registers.>|<change,memory and registers.>","provides a means by which one process (the ""tracer"") may observe and control the execution of another process|provides a means by which one process (the ""tracer"") may observe and control the execution of another process|examine and change the tracee's memory and registers.|examine and change the tracee's memory and registers.",PROC
shmdt(),XSI shared memory detach operation,"<detach,shared memory>","<,>",,MEM
shmat(),XSI shared memory attach operation,"<attach,shared memory>","<,>",,ID
shmget(),allocates a System V shared memory segment,"<allocate,shared memory>","<,>",,MEM
waitpid(),wait for a child process to stop or terminate,"<wait for,process>","<,>",,PROC
wait4(),"wait for process to change state, BSD style","<wait for,process>","<,>",,PROC
mremap(),remap a virtual memory address,"<remap,memory>","<expand,memory>",expands an existing memory mapping,MEM
mprotect(),set protection on a region of memory,"<set,region of memory>","<,>",,MEM
set_tid_address(),set pointer to thread ID,"<set,pointer to thread ID>","<,>",,MEM
arch_prctl(),set architecture-specific thread state,"<set,thread state>","<,>",,MEM
set_thread_area(),set a thread local storage (TLS) area,"<set,thread local storage area>","<,>",,MEM
nanosleep(),high-resolution sleep,"<sleep,>","<suspend,execution>",suspends the execution,TIME
set_robust_list(),set list of robust futexes,"<set,futexes>","<,>",,MEM
futex(),fast user-space locking,"<lock,>","<wait,condition>|<wake,processes or threads>",waiting until a certain condition becomes true|can be used to wake any processes or threads,MEM
brk(),change the location of the program break,"<change,the location of the program break>","<set,end of data segment>",sets the end of the data segment to the value,MEM
ioctl(),control device,"<control,device>","<manipulate,device parameters>",manipulates the underlying device parameters of special files.,FILE
setsid(),creates a session and sets the process group ID,"<set,process group ID>","<,>",,ID
setsid(),creates a session and sets the process group ID,"<create,session>","<,>",,ID
getppid(),get process identification,"<get,process identification>","<,>",,ID
getpid(),get process identification,"<get,process identification>","<,>",,ID
getgid(),get group identity,"<get,group identity>","<,>",,ID
getegid(),get group identity,"<get,group identity>","<,>",,ID
geteuid(),get user identity,"<get,user identity>","<,>",,ID
getuid(),get user identity,"<get,user identity>","<,>",,ID
settimeofday(),get / set time,"<set,time>","<,>",,TIME
time(),get time in seconds,"<get,time>","<,>",,TIME
gettimeofday(),get / set time,"<get,time>","<,>",,TIME
prlimit64(),get/set resource limits,"<get,resource limits>","<,>",,RESOURCE_BYTE
getrlimit(),get/set resource limits,"<get,resource limits>","<,>",,RESOURCE_BYTE
ugetrlimit(),get/set resource limits,"<get,resource limits>","<,>",,RESOURCE_BYTE
sysinfo(),return system information,"<return,system statistics>","<,>",,PROC
uname(),get name and information about current kernel,"<get,name and information about current kernel>","<,>",,PROC
connect(),initiate a connection on a socket,"<initiate,connection on a socket>","<connect,socket>",connects the socket,NET
pipe(),create pipe,"<create,pipe>","<,>",,FILE
bind(),bind a name to a socket,"<bind,name to socket>","<assign,address>",assigns the address specified by addr to the socket,NET
socket(),create an endpoint for communication,"<create,endpoint for communication>","<,>",,NET
setsockopt(),get and set options on sockets,"<set,options on sockets>","<manipulate,options>",manipulate options for the socket,NET
getsockopt(),get and set options on sockets,"<get,options on sockets>","<manipulate,options>",manipulate options for the socket,NET
getsockname(),get socket name,"<get,socket name>","<,>",,NET
recv(),receive a message from a socket,"<receive,message from socket>","<,>",,NET
recvmsg(),receive a message from a socket,"<receive,message from socket>","<,>",,NET
recvfrom(),receive a message from a socket,"<receive,message from socket>","<,>",,NET
send(),send a message on a socket,"<send,message on socket>","<,>",,NET
sendto(),send a message on a socket,"<send,message on socket>","<,>",,NET
sendmsg(),send a message on a socket,"<send,message on socket>","<,>",,NET
quotactl(),manipulate disk quotas,"<manipulate,disk quotas>","<,>",,FILE
