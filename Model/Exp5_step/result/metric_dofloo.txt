asg_object: {'/proc/stat', '/etc/rc\\.local', '^sh$', '/sys/devices/.*', 'Permission:[0-9]{3}', '/etc/sed[0-9a-zA-Z]{6}', '0x[0-9a-zA-Z]{8}', '^GID.*', '^eth.*', '^PID.*', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d+', 'Permission', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '/dev/urandom', '/proc/self', '/etc/init\\.d/.*', '/proc/net/dev', '.*/selinux', '^uname$', '^sed$', '^UID.*', '/.*bin/sed', '/etc/rc.*\\.d/.*'}

Sample Dofloo-BleepingComputer.csv
	num of segment in report: 16, 0 of them contain ASG object(s)
	lenght of ctd's OPset is 0
	#R_malObj
	num of ctd objects: 0, num of asg objects: 55. R_malObj is 0.0000
		ctd_object: []
	#R_malSysObj
	num of ctd objects: 0, num of asg objects: 6. R_malSysObj is 0.0000
		len(asg_OPset): 52, len(ctd_OPset): 0
	#R_malOps
	num of matched asg op: 0, num of asg op: 284. R_malOps is 0.0000
		refered lifecycle: []
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 9. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

Sample Dofloo-MalwareMustDie.csv
	num of segment in report: 81, 10 of them contain ASG object(s)
	lenght of ctd's OPset is 14
	#R_malObj
	num of ctd objects: 4, num of asg objects: 55. R_malObj is 0.0727
		ctd_object: ['0x[0-9a-zA-Z]{8}', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '^eth.*', '^sed$']
	#R_malSysObj
	num of ctd objects: 0, num of asg objects: 6. R_malSysObj is 0.0000
		len(asg_OPset): 52, len(ctd_OPset): 14
	#R_malOps
	num of matched asg op: 0, num of asg op: 284. R_malOps is 0.0000
		refered lifecycle: [1, 2, 3, 4, 9, 10]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 9. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP 2 act=brk(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 6 act=look, obj=0x0002FBF0, sent=I look from its DCB data from where it was called and clarifying the answer:  1 2 3 4 5 6 7 8 9 10 11 0x0002FBF0 aProt_execProt_ DCB PROT_EXEC|PROT_WRITE failed.,0xA,0 0x0002FC0E                 DCB 0xA,0 0x0002FC10 aInfoThisFileIs DCB 0x24,Info: This file is packed with the UPX executable packer http:/ 0x0002FC10                 DCB /upx.sf.net ,0x24,0xA,0 0x0002FC5F aIdUpx3_91Copyr DCB 0x24,Id: UPX 3.91 Copyright (C) 1996-2013 the UPX Team.>
	<OP 3 act=set_thread_area(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 5 act=find, obj=0x0002fbd0, sent=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;-- entry0: 0x0002f118  adr     r12, off_2f104 0x0002f11c  ldmia   r12, {r1,r2,r10,r11,lr} 0x0002f120  add     r10, r10, r12 0x0002f124  add     r11, r11, r12 0x0002f128  mov     r0, r2 0x0002f12c  sub     r9, r12, r1 0x0002f130  add     r1, r1, #0x1000 0x0002f134  mov     r3, #0 0x0002f138  stmfd   sp!, {r0-r3,lr} 0x0002f13c  mov     r2, #7 0x0002f140  ldr     r3, [r12,#0x10] 0x0002f144  mov     r5, #0 0x0002f148  mov     r4, 0xffffffff 0x0002f14c  orr     r3, r3, #0x10 0x0002f150  mov     r7, #0xc0 0x0002f154  svc     0 0x0002f158  cmn     r0, #0x1000 0x0002f15c  bcs     loc_0x02fbd0   [...]  ..following the registers value and in r1 we will find the value that can tell what is happening:  1 2 3 4 5 0x0002fbd0  mov  r2, #0x1e 0x0002fbd4  adr  r1, aprot_execprot_ ; PROT_EXEC|PROT_WRITE failed.\n 0x0002fbd8  mov  r0, #2 0x0002fbdc  mov  r7, #4 0x0002fbe0  svc  0 This value may ring your bells too :).>
	<OP 4 act=set_tid_address(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 5 act=find, obj=0x0002fbd0, sent=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;-- entry0: 0x0002f118  adr     r12, off_2f104 0x0002f11c  ldmia   r12, {r1,r2,r10,r11,lr} 0x0002f120  add     r10, r10, r12 0x0002f124  add     r11, r11, r12 0x0002f128  mov     r0, r2 0x0002f12c  sub     r9, r12, r1 0x0002f130  add     r1, r1, #0x1000 0x0002f134  mov     r3, #0 0x0002f138  stmfd   sp!, {r0-r3,lr} 0x0002f13c  mov     r2, #7 0x0002f140  ldr     r3, [r12,#0x10] 0x0002f144  mov     r5, #0 0x0002f148  mov     r4, 0xffffffff 0x0002f14c  orr     r3, r3, #0x10 0x0002f150  mov     r7, #0xc0 0x0002f154  svc     0 0x0002f158  cmn     r0, #0x1000 0x0002f15c  bcs     loc_0x02fbd0   [...]  ..following the registers value and in r1 we will find the value that can tell what is happening:  1 2 3 4 5 0x0002fbd0  mov  r2, #0x1e 0x0002fbd4  adr  r1, aprot_execprot_ ; PROT_EXEC|PROT_WRITE failed.\n 0x0002fbd8  mov  r0, #2 0x0002fbdc  mov  r7, #4 0x0002fbe0  svc  0 This value may ring your bells too :).>
	<OP 5 act=set_robust_list(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 5 act=find, obj=0x0002fbd0, sent=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;-- entry0: 0x0002f118  adr     r12, off_2f104 0x0002f11c  ldmia   r12, {r1,r2,r10,r11,lr} 0x0002f120  add     r10, r10, r12 0x0002f124  add     r11, r11, r12 0x0002f128  mov     r0, r2 0x0002f12c  sub     r9, r12, r1 0x0002f130  add     r1, r1, #0x1000 0x0002f134  mov     r3, #0 0x0002f138  stmfd   sp!, {r0-r3,lr} 0x0002f13c  mov     r2, #7 0x0002f140  ldr     r3, [r12,#0x10] 0x0002f144  mov     r5, #0 0x0002f148  mov     r4, 0xffffffff 0x0002f14c  orr     r3, r3, #0x10 0x0002f150  mov     r7, #0xc0 0x0002f154  svc     0 0x0002f158  cmn     r0, #0x1000 0x0002f15c  bcs     loc_0x02fbd0   [...]  ..following the registers value and in r1 we will find the value that can tell what is happening:  1 2 3 4 5 0x0002fbd0  mov  r2, #0x1e 0x0002fbd4  adr  r1, aprot_execprot_ ; PROT_EXEC|PROT_WRITE failed.\n 0x0002fbd8  mov  r0, #2 0x0002fbdc  mov  r7, #4 0x0002fbe0  svc  0 This value may ring your bells too :).>
	<OP10 act=mprotect(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 5 act=find, obj=0x0002fbd0, sent=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;-- entry0: 0x0002f118  adr     r12, off_2f104 0x0002f11c  ldmia   r12, {r1,r2,r10,r11,lr} 0x0002f120  add     r10, r10, r12 0x0002f124  add     r11, r11, r12 0x0002f128  mov     r0, r2 0x0002f12c  sub     r9, r12, r1 0x0002f130  add     r1, r1, #0x1000 0x0002f134  mov     r3, #0 0x0002f138  stmfd   sp!, {r0-r3,lr} 0x0002f13c  mov     r2, #7 0x0002f140  ldr     r3, [r12,#0x10] 0x0002f144  mov     r5, #0 0x0002f148  mov     r4, 0xffffffff 0x0002f14c  orr     r3, r3, #0x10 0x0002f150  mov     r7, #0xc0 0x0002f154  svc     0 0x0002f158  cmn     r0, #0x1000 0x0002f15c  bcs     loc_0x02fbd0   [...]  ..following the registers value and in r1 we will find the value that can tell what is happening:  1 2 3 4 5 0x0002fbd0  mov  r2, #0x1e 0x0002fbd4  adr  r1, aprot_execprot_ ; PROT_EXEC|PROT_WRITE failed.\n 0x0002fbd8  mov  r0, #2 0x0002fbdc  mov  r7, #4 0x0002fbe0  svc  0 This value may ring your bells too :).>
	<OP11 act=arch_prctl(), obj=0x[0-9a-zA-Z]{8} (mem)>, <OP 5 act=find, obj=0x0002fbd0, sent=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ;-- entry0: 0x0002f118  adr     r12, off_2f104 0x0002f11c  ldmia   r12, {r1,r2,r10,r11,lr} 0x0002f120  add     r10, r10, r12 0x0002f124  add     r11, r11, r12 0x0002f128  mov     r0, r2 0x0002f12c  sub     r9, r12, r1 0x0002f130  add     r1, r1, #0x1000 0x0002f134  mov     r3, #0 0x0002f138  stmfd   sp!, {r0-r3,lr} 0x0002f13c  mov     r2, #7 0x0002f140  ldr     r3, [r12,#0x10] 0x0002f144  mov     r5, #0 0x0002f148  mov     r4, 0xffffffff 0x0002f14c  orr     r3, r3, #0x10 0x0002f150  mov     r7, #0xc0 0x0002f154  svc     0 0x0002f158  cmn     r0, #0x1000 0x0002f15c  bcs     loc_0x02fbd0   [...]  ..following the registers value and in r1 we will find the value that can tell what is happening:  1 2 3 4 5 0x0002fbd0  mov  r2, #0x1e 0x0002fbd4  adr  r1, aprot_execprot_ ; PROT_EXEC|PROT_WRITE failed.\n 0x0002fbd8  mov  r0, #2 0x0002fbdc  mov  r7, #4 0x0002fbe0  svc  0 This value may ring your bells too :).>

Sample Dofloo-Securityaffairs.csv
	num of segment in report: 13, 2 of them contain ASG object(s)
	lenght of ctd's OPset is 4
	#R_malObj
	num of ctd objects: 4, num of asg objects: 55. R_malObj is 0.0727
		ctd_object: ['/etc/rc.*\\.d/.*', '/etc/rc\\.local', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d+']
	#R_malSysObj
	num of ctd objects: 2, num of asg objects: 6. R_malSysObj is 0.3333
		len(asg_OPset): 52, len(ctd_OPset): 4
	#R_malOps
	num of matched asg op: 4, num of asg op: 284. R_malOps is 0.0141
		refered lifecycle: [30, 36, 37]
	#R_malChangeOps
	num of matched asg op: 3, num of asg op: 9. R_malChangeOps is 0.3333
		ref-sys lifecycle: [30]

	hits
	<OP31 act=rename(), obj=/etc/rc\.local>, <OP 3 act=modify, obj=/etc/rc.local, sent=Trend Micro researchers also discovered that the latest variant of the AESDDoS bot can modify files i.e., /etc/rc.local and /etc/rc.d/rc.local, as an autostart technique by appending the {malware path}/{malware file name} reboot command.>
	<OP37 act=connect(), obj=ip_addr/ip_addr:port/port>, <OP 1 act=connect, obj=23.224.59.34:48080, sent=The malware also connects to 23.224.59.34:48080 to send and receive remote shell commands from the attacker.>
	<OP38 act=connect(), obj=ip_addr/ip_addr:port/port>, <OP 2 act=connect, obj=23.224.59.34:48080, sent=The malware also connects to 23.224.59.34:48080 to send and receive remote shell commands from the attacker.>

	sys_hits
	<OP31 act=rename(), obj=/etc/rc\.local>, <OP 3 act=modify, obj=/etc/rc.local, sent=Trend Micro researchers also discovered that the latest variant of the AESDDoS bot can modify files i.e., /etc/rc.local and /etc/rc.d/rc.local, as an autostart technique by appending the {malware path}/{malware file name} reboot command.>

Sample Dofloo-SyscallParty.csv
	num of segment in report: 99, 7 of them contain ASG object(s)
	lenght of ctd's OPset is 9
	#R_malObj
	num of ctd objects: 7, num of asg objects: 55. R_malObj is 0.1273
		ctd_object: ['/etc/init\\.d/.*', '/etc/rc\\.local', '/proc/net/dev', '/proc/self', '0x[0-9a-zA-Z]{8}', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '^sed$']
	#R_malSysObj
	num of ctd objects: 2, num of asg objects: 6. R_malSysObj is 0.3333
		len(asg_OPset): 52, len(ctd_OPset): 9
	#R_malOps
	num of matched asg op: 8, num of asg op: 284. R_malOps is 0.0282
		refered lifecycle: [22, 30, 32, 46]
	#R_malChangeOps
	num of matched asg op: 3, num of asg op: 9. R_malChangeOps is 0.3333
		ref-sys lifecycle: [30]

	hits
	<OP23 act=open(), obj=/etc/rc\.local>, <OP 3 act=add, obj=/etc/rc.local, sent=Persistence Persistence is achieved by the malware by adding to /etc/rc.local and the /etc/init.d/boot.local files (in the auto_boot function); however before it overwrites this file it first checks to see if it has already done so.>
	<OP31 act=rename(), obj=/etc/rc\.local>, <OP 7 act=format, obj=/etc/rc.local, sent=A string is formatted and the sed program is called which writes to the file in question (there are several string operations, such as sed -i -e '2 i%s/%s' /etc/rc.local is formatted for example).>
	<OP33 act=open(), obj=/etc/init\.d/.*>, <OP 4 act=add, obj=/etc/init.d/boot.local, sent=Persistence Persistence is achieved by the malware by adding to /etc/rc.local and the /etc/init.d/boot.local files (in the auto_boot function); however before it overwrites this file it first checks to see if it has already done so.>
	<OP47 act=read(), obj=/proc/net/dev>, <OP 8 act=read, obj=/proc/net/dev, sent=The way the malware gets information regarding the network adapter is reading the /proc/net/dev file.>

	sys_hits
	<OP31 act=rename(), obj=/etc/rc\.local>, <OP 7 act=format, obj=/etc/rc.local, sent=A string is formatted and the sed program is called which writes to the file in question (there are several string operations, such as sed -i -e '2 i%s/%s' /etc/rc.local is formatted for example).>

Sample Dofloo-Trendmicro.csv
	num of segment in report: 10, 2 of them contain ASG object(s)
	lenght of ctd's OPset is 7
	#R_malObj
	num of ctd objects: 7, num of asg objects: 55. R_malObj is 0.1273
		ctd_object: ['/etc/init\\.d/.*', '/etc/rc.*\\.d/.*', '/etc/rc\\.local', '/proc/net/dev', '/proc/self', '/proc/stat', '^sed$']
	#R_malSysObj
	num of ctd objects: 3, num of asg objects: 6. R_malSysObj is 0.5000
		len(asg_OPset): 52, len(ctd_OPset): 7
	#R_malOps
	num of matched asg op: 1, num of asg op: 284. R_malOps is 0.0035
		refered lifecycle: [51]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 9. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP52 act=read(), obj=/proc/stat>, <OP 5 act=gather, obj=/proc/stat, sent= This Backdoor gathers the following data:  CPU information Memory statistics IP address of infected machine Reads the following information from /proc: /proc/stat /proc/meminfo /proc/cpuinfo /proc/net/dev /proc/self/exe /proc/self/maps /proc/sys/vm/overcommit_memory /proc/sys/kernel/rtsig-max /proc/sys/kernel/ngroups_max /proc/sys/kernel/osrelease /proc/self/fd/%d/%s /proc/self/fd /proc/net Other Details >


OperationPair that changes system resources:
[<OP30 act=fchmod(), obj=/etc/sed[0-9a-zA-Z]{6}>, <OP28 act=write(), obj=/etc/sed[0-9a-zA-Z]{6}>, <OP31 act=rename(), obj=/etc/rc\.local>]

{
    ".*/selinux": [
        "/etc/selinux/config",
        "/selinux",
        "/sys/fs/selinux"
    ],
    "/.*bin/sed": [
        "/bin/sed",
        "/sbin/sed",
        "/usr/bin/sed",
        "/usr/local/bin/sed",
        "/usr/local/sbin/sed",
        "/usr/sbin/sed"
    ],
    "/dev/urandom": [
        "/dev/urandom"
    ],
    "/etc/init\\.d/.*": [
        "/etc/init.d/boot.local"
    ],
    "/etc/rc.*\\.d/.*": [
        "/etc/rc.d/rc.local"
    ],
    "/etc/rc\\.local": [
        "/etc/rc.local"
    ],
    "/etc/sed[0-9a-zA-Z]{6}": [
        "/etc/sedQUGLbs",
        "/etc/sedQhw17q",
        "/etc/sedvTqQwq"
    ],
    "/proc/net/dev": [
        "/proc/net/dev"
    ],
    "/proc/self": [
        "/proc/self/exe"
    ],
    "/proc/stat": [
        "/proc/stat"
    ],
    "/sys/devices/.*": [
        "/sys/devices/system/cpu/online"
    ]
}