Number,Content
Sentence 1,Could Threat Actors Be Downgrading Their Malware to Evade Detection?
Sentence 2,"by Nozomi Networks Labs
Nov 2, 2022
Share This
 
 
Threat actors are known to modify their malware to evade detection and make additional profits."
Sentence 3,"They do this by changing the file name and IP address, along with other features."
Sentence 4,"This gives them an advantage, as it makes detection more difficult and helps them stay under the radar."
Sentence 5,"The modifications are so common that we noticed not only upgraded but also downgraded versions of the same malware, which could be part of a broader threat actor strategy."
Sentence 6,"These upgraded/downgraded versions may suggest the existence of modular malware capabilities, with customers who pay extra getting access to additional and/or unique features."
Sentence 7,This may also suggest that threat actors are tailoring payloads for each campaign to avoid revealing all of a malware’s functionality to researchers at once.
Sentence 8,"After analyzing several malware types, we decided to focus on the Gafgyt malware family, which is known to target IoT devices, such as routers, to launch Denial of Service (DoS) attacks."
Sentence 9,It requires a certain effort for security researchers stay on top of the latest botnet developments and their changes.
Sentence 10,"That’s why Nozomi Networks focuses on detecting malicious servers across the internet, in order to better understand malware behavior and enhance the protection of our customers."
Sentence 11,"In this blog, we introduce the first and second stage of the Gafgyt malware, its variants/modifications, and provide Indicators of Compromise (IoC)s for detecting malicious activity."
Sentence 12,"Downgrading Malware to Evade Detection BLOG
The number of botnet-related malware families has increased significantly."
Sentence 13,"
First Stage – Initial Access
One of the most prevalent initial access techniques that Nozomi Networks Labs researchers track is the misuse of valid accounts."
Sentence 14,Malware attempts to perform credential access by brute forcing SSH and telnet credentials.
Sentence 15,"If successful, the attacker can achieve code execution and deploy the first stage of malware to the vulnerable devices."
Sentence 16,"Our chain of honeypots was able to capture the top credentials misused by attackers in the last week of September 2022 (Figure 1):

Fig 1 Top misused credentials
Figure 1."
Sentence 17,"Top credentials misused by attackers within the last week of September 2022
"
Sentence 18,"
Most of these entries (e.g."
Sentence 19,"admin:admin, root:root, admin:1234, etc.)"
Sentence 20,are the default usernames and passwords used to access various Internet of Things (IoT) devices.
Sentence 21,These credentials are used by multiple botnets; some are even accessible in the publicly available source code of Mirai malware.
Sentence 22,"The top entries change over time, so the results may vary from month to month."
Sentence 23,You can find a chart of top credentials our honeypots captured in the first half of 2022 in our OT/IoT Security Report.
Sentence 24,"Once the malicious actors have gained access to the device, they then execute a bash script that allows them to deliver and execute the second-stage payload."
Sentence 25,The classic approach involves iteratively downloading several Executable and Linkable Format (ELF) payloads tailored to different architectures (usually using standard tools like curl or wget).
Sentence 26,"The most common computer architectures are x86, ARM, MIPS/MIPSEL, PowerPC, SH-4, SPARC and m68k, so it will vary depending on the device."
Sentence 27,The threat actor will then attempt to execute each of them on the victim’s device.
Sentence 28,"Fig 2 First stage bash script
Figure 2."
Sentence 29,"An example of the first stage bash script
Now, let’s focus on the binary payloads delivered in the second stage and the type of information that can be used to aid researchers in attribution and clusterization."
Sentence 30,"
Second Stage Payload
Traditionally, the first stage of a brute force attack is initiated by other compromised devices, while malicious Command-and-Control (C2) servers are used to deliver second stage payloads and issue commands to bots."
Sentence 31,"To further complicate this attack, a different filename is usually associated with each C2 server."
Sentence 32,"Due to the large number of different IPs used to carry out these attacks, the detection rate for malicious IPs on Virus Total is quite low."
Sentence 33,"In the following example (Figure 3), Nozomi Networks is one of only eight vendors, out of a total of 94, that can detect malicious indicators that have been modified."
Sentence 34,"Fig 3 Malicious C2 detections
Figure 3."
Sentence 35,"Low number of malicious C2 detections
"
Sentence 36,"
There are several types of second-stage payloads:

not packed samples
samples packed with public versions of Ultimate Packer for Executables (UPX)
samples packed with unreleased versions of UPX
samples packed with any version of UPX and corrupted afterwards
"
Sentence 37,"
If you are interested in the exact distribution of packers used, you can learn more in one of our previous blogs dedicated to anti-reverse engineering techniques."
Sentence 38,"Regarding the UPX corruption, Nozomi Networks Labs recently released an open-source tool that automatically restores these modifications."
Sentence 39,"
Gafgyt (aka Qbot) Malware Samples
Now let’s dissect the Gafgyt malware and its variants."
Sentence 40,The Gafgyt source code was published more than five years ago and is publicly available on GitHub for everyone to re-use.
Sentence 41,"Therefore, many of the analyzed samples implement one or more of Gafgyt capabilities."
Sentence 42,"At first, the analyzed files may seem to belong to the same family, but they contain certain differences in capabilities and main functionality."
Sentence 43,"
Common Sample
The common objective of the Gafgyt malware is to generate DDoS attacks via one of the few supported protocols."
Sentence 44,"Figure 4 shows how the corresponding commands look inside the malware:

Fig 4 supported commands
Figure 4."
Sentence 45,"A routine check of which supported commands were issued
"
Sentence 46,"
These commands allow threat actors to perform DDoS attacks by using several protocols and methods (e.g., UDP, TCP, ICMP and HTTP)."
Sentence 47,"In this case we see the usage of:

UDP flood
ICMP flood
TCP SYN flood
TCP ACK flood
TCP raw flood
HTTP flood
"
Sentence 48,"
Other common functionalities enable the malicious actors to verify the status of the bot, execute arbitrary commands on it, or kill the malicious process."
Sentence 49,"Additional functionality used by one of the analyzed samples includes:  

scanning and searching for other devices on demand and attempt to penetrate them (Figure 5)
using a hardcoded list of credentials (similar to the one used by Mirai botnet)

This capability is also present on the Gafgyt source code on GitHub:

char *usernames[] = {root\0, \0, admin\0, user\0, login\0, guest\0};

char *passwords[] = {root\0, \0, toor\0, admin\0, user\0, guest\0, login\0, changeme\0, 1234\0, 12345\0, 123456\0, default\0, pass\0, password\0}
"
Sentence 50,"
However, in the analyzed samples, the list of credentials has been extended to include some credentials listed in Mirai source code."
Sentence 51,"Fig 5 scanner credentials
Figure 5."
Sentence 52,"Credentials used by the scanner in the analyzed sample
"
Sentence 53,"
Unique Sample
The Gafgyt sample we analyzed uses a few defensive evasion techniques to conceal themselves and prolongate the infection."
Sentence 54,"Here are some of the most common unique functionalities:

Monitoring processes running on the system: One of the techniques used by this malicious sample is to list and continuously monitor all the processes running on the machine and to kill any running process that is not stored on a specific path."
Sentence 55,"For each process, the sample obtains the path of the executables resolving the symlink in /proc/PID/exe."
Sentence 56,"When obtained, the file path checks if it contains the substrings bin/ or lib/."
Sentence 57,"Interestingly, this feature corresponds to the command “stop” in the extended sample, while in the lightweight sample it is always executed."
Sentence 58,"Hiding the process name: At the very beginning of the execution and just after setting up a socket listening for incoming commands from the C2 server, the malware renames its process (e.g., to /bin/bash)."
Sentence 59,"To achieve this, it uses prctl syscall with an argument PR_SET_NAME, which allows it to set the name of the calling process to the values passed as a second argument."
Sentence 60,"
Fig 6 malware using prctl
Figure 6."
Sentence 61,"Malware using prctl to change its process name
"
Sentence 62,"
Active use of forks: To be able to segregate its functionality, malware will execute parts of the code in many separate forks, which can complicate the debugging."
Sentence 63,"As shown in Figure 7, one of them creates 15 different instances
"
Sentence 64,"
Fig 7 active use of forks
Figure 7."
Sentence 65,"Active use of forks in IoT malware
"
Sentence 66,"
Lightweight Sample
While conducting our analysis, we discovered a Gafgyt sample with minimal amounts of Gafgyt capabilities."
Sentence 67,"It supports only three commands, whereas the previously described samples have 12 different functionalities."
Sentence 68,One of the basic features of this sample is for the C2 server to be able to check if the bot is alive.
Sentence 69,"The C2 sends the command “PING” to the bot, and the bot will answer with “PONG” if it is up and running, as shown here:

if (!strcmp(argv[0], PING))

  {

sockprintf(mainCommSock, PONG!"
Sentence 70,");

return;

  }

Figure 8 shows the second and third functionalities in the function called botkill_and_udp_flood."
Sentence 71,"Fig 8 lightweight gafgyt
Figure 8."
Sentence 72,"Three capabilities inside the lightweight version of Gafgyt: ping, botkill and UDP flood attack."
Sentence 73,"
The botkill feature allows the C2 to send a command to kill the malicious process on the infected device, same as in the feature-rich sample described above."
Sentence 74,If the bot receives the command “botkill” it simply exits.
Sentence 75,"Fig 9 botkill functionality
Figure 9."
Sentence 76,"Botkill functionality
"
Sentence 77,"
Another way this functionality is implemented is by issuing a kill -9 PID command, as shown in Figure 10:

Fig 10 botkill command
Figure 10."
Sentence 78,"Another implementation of botkill command
"
Sentence 79,"
The UDP flood attack, exactly like in the other sample’s code, contains an infinite loop that calls sys_sendto which keeps sending UDP packets until this malicious program is killed."
Sentence 80,"Fig 11 UDP flood attack
Figure 11."
Sentence 81,"UDP flood attack inside the malicious sample code

"
Sentence 82,"
Conclusion
According to this research, threat actors may have various upgraded and downgraded variants of their malwares."
Sentence 83,"This could mean that they’re changing their tactics and evading detection, or it could be a part of a dark web cyber crime scheme to make additional profits by modulating the malware; additional features being added à la carte."
Sentence 84,Modifications include using different file names and IPs to evade detection and increase the longevity of an attack.
Sentence 85,"At Nozomi Networks, we distinguish between static and changing functionality to create robust detections that can help you keep track of different campaigns."
Sentence 86,"To protect your network and systems, it is necessary to monitor these changes and incorporate tactics that counter these attacks into your defense strategy."
Sentence 87,"Below are indicators associated with the malicious botnet discussed in this blog:

"
Sentence 88,"
IoCs
62.197.136.231
80.76.51.244
2b1cc052f78141d91e1bc40db25418359a05c4ad28d2cd55f6e503e4f78c1010
05e586d03dfb2c4a79372d46f2f4a8a91bf24d303017a0ce9f223263b28752a5"
